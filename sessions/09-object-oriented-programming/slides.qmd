---
title: "Introduction to Object-Oriented Programming"
subtitle: "`super(), __init__?`"
footer: '**Specialist Analytics Team //** Object-Oriented Programming **//** August 28, 2025'
format: revealjs
---

## Learning Objectives
- Understand core concepts of object-oriented programming
- Understand the benefits of object-oriented programming
- Learn how to create your own object classes (see the accompanying notebook)

---

## Object-Oriented Programming? What is this tech-geekery and why should I care?

- Python is an object-oriented language. Every entity is treated as an object, even single integers are objects of the "int" class.
- An understanding of object-oriented programming will help give you a better understanding of how the packages you use function.
- You can use this understanding to create your own programs that harness the strengths of objected-oriented programming:
    - Convenience
    - Flexibility
    - Extensibility
    - Simpler interfacing

---

## History

::: {.column style="width:65%; font-size:30pt"}
- In the early days of programming, variables could only be the "primitive" data types containing a single value
  - <span style="font-size:21px;">Integer, Float, Boolean, Char</span>
- Later came Structures ("Structs"), which can contain multiple values of different types.
- Structs were the precursor to objects, but they couldn't yet contain associated functions within them.
- Objects first appear in the Simula programming language in the 1960s for modelling physical phenomena.
- Those objects influenced Alan Kay, who coined the term "object-oriented programming" to describe architecture where objects pass information to one another.
:::

::: {.column width="35%"}

<figure style="display: flex; flex-direction: column; align-items: center; margin: 0;">
  <img src="images/Alan_Kay_Photo.png"/>
  <figcaption style="margin-top: 0.1em; line-height: 1.2;">My. Kay looking very pleased with his coinage.</figcaption>
</figure>

:::

--- 

## Classes and Objects
- Classes act as **templates** for objects
- Objects are referred to as "instances" of classes
  - We talk of objects being "instantiated" from a class
  - Think of each object as being a copy created using the class template
- Objects represent entities with their own data (attributes) and behaviours (methods)
- We can create lots of instances of an object with their own attribute values and call methods on them separately
yet _consistently_
- Objects are self-contained units that can interact with objects both of the same and of other classes

![](images/cookie_cutter.jpg){fig-align="center" width="400" height="250"}

---

![A diagram representing a class at the top and object instances created from the class](images/classes1.png){fig-align="center"}

---

## Inheritance

- **Child classes inherit attributes and methods from parent classes**
- Child classes can modify / override and add to what they have inherited
- Reduces code duplication; increases re-usability
- Improves extensibility: i.e. new classes with the same core behaviours, but new features, can be based on existing classes

---

![A parent class (green) and two different child classes (blue and orange), each with objects created from them](images/classes2.png){fig-align="center"}


# More Object-Oriented Programming Concepts{data-background-color="#425563"}

## Encapsulation _for convenience_
- **Bundling data (attributes) with functions (methods)**
- Methods are tailor-made to work with the data contained in the object
- Saves on having to pass data between multiple functions, which is particularly useful in machine learning models
- Pandas DataFrames demonstrate encapsulation. They contain data, but also have methods associated with them
  - `df = pd.DataFrame(data)` <-- Instantiating a dataframe object
  - `df.head()`, `df.describe()`, `df.drop()` <-- calling methods


## Polymorphism _for flexibility_
- **Objects of different types can be treated in the same way, even if the behaviour differs**
  - With Pandas DataFrames, .head() will work on both a DataFrame and a Series^[Series.head() with return the first few values, 
  while DataFrame.head() returns the first few rows of all columns]
- "Duck typing": If the behaviour of a thing matches that of another thing, they are considered the same. In OOP terms, 
the presence of certain methods is more important than which class an object comes from^[The concept of "duck typing", found 
in Python and other languages, comes from the phrase "if it walks like a duck, quacks like a duck and swims like a duck,
then it's a duck."]
  - The scikit-learn library's allows the same code to work for different models

## Abstraction _for simpler interfacing_
- **Separating the implementation code from the functionality that users (i.e. other programmers) interact with**
- Creates a simple interface for parts of a program pass information between each other

- Examples:
    - When working with machine learning models, users only need to apply simple methods to train the model and make a prediction.
    - Entities interacting with each other within a simulation model.
  

## When to use OOP
- When you want to easily re-use code, to avoid repetition and to extend functionality
- When you want to model real-world entities
- When you want to make code modular and easy for others to work with
- When you want to simplify end-users' interaction with Python, fostering a self-service approach to analytics
- **Less appropriate for:** When you want to be certain of the state of your data at each step of a process, for example when cleansing data

- Discrete Event Simulations for modelling queueing / capacity problems
- Creating custom, branded visualisation packages, for example an NHS-branded SPC chart
- Creating a package that can be used to import the latest data from a website without users having to understand API calls or the website's structure

## Resources

[RealPython: Object-Oriented Programming (OOP) in Python](https://realpython.com/python3-object-oriented-programming/)\
\
[OOP produces code that is easy to read, extend and maintain](https://medium.com/@lawjimmy123/how-data-scientists-can-leverage-object-oriented-programming-oop-design-pattern-to-write-better-699166910882)\
\
[HSMA's Guide to Object-Oriented Programming](https://docs.google.com/presentation/d/1e7ObbZmRNcm_lqxR_tFvwV78YV2SzBGSwWRweGiezYg/edit?slide=id.p1#slide=id.p1)\
\
[HSMA's Discrete Event Simulation Module](https://hsma.co.uk/hsma_content/modules/current_module_details/2_des.html)

# Thank You! {.center}

<br>
Contact: 
<br>

<ul >
{{< fa solid envelope >}} [scwcsu.analytics.specialist@nhs.net](mailto:scwcsu.analytics.specialist@nhs.net)
</ul>


Notebook & Slides:
<br>

<ul >
{{< fa brands github >}}[/NHS-South-Central-and-West/code-club](https://nhs-south-central-and-west.github.io/code-club/sessions/09-object-oriented-programming/)
</ul>
<br>

... And don't forget to give us your [feedback](https://forms.office.com/e/g9fnSVPRwE).