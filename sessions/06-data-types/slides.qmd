---
title: "An Introduction To Data Types"
footer: '**SAT //** Intro to Data Types **//** July 2025'
format: 
 revealjs: 
  reference-location: document
  fig-cap-location: bottom
  self-contained: false
  math: false
---

# Data types overview

## What are data types and why do they matter?

::: columns

::: {.column style="width:65%; font-size:20pt"}
- All^[experimental ternary computers and quantum computing are firmly out of scope of this presentation] computers store data in binary (1s and 0s) – example shown on the right, represented as hexadecimal
- Variables add a level of convenience and abstraction by letting us name specific buckets to put data in, and data types give structure to these buckets. 
- In the early days of computing data was stored as raw binary
+ The need for specific data types came from the emergence of structured programming from the 1950s onward
+ Languages like FORTRAN and COBOL introduced the segregation of numeric datatypes and character types
+ Object-oriented languages like C++ and Java further expanded on this with user-defined data types
- Specifying the type of data allows the machine to allocate an appropriate amount of memory to it (was very important in the early days of computing, but still relevant)
- Allows us to prevent errors; setting the expectation on the exact type of data that a specific variable will contain.
:::

::: {.column width="35%"}
<figure style="display: flex; flex-direction: column; align-items: center; margin: 0;">
  <img src="images/data-types-1a.png" />
  <figcaption style="margin-top: 0.1em; line-height: 1.2;">Raw data in hex format (ASCII representation on right).</figcaption>
</figure>

<figure style="display: flex; flex-direction: column; align-items: center; margin: 0;">
  <img src="images/data-types-1b.jpg" />
  <figcaption style="margin-top: 0.1em; line-height: 1.2;">Core rope memory (Konstantin Lanzet, Wikimedia Commons)</figcaption>
</figure>
:::

:::

## A quick note on type systems 

::: {.column style="width:65%; font-size:18pt"}
Programming languages have different philosophies. They are often referred as being “strong” or “weak” and “static” or “dynamic”.

### Types of type checking

Statically-typed languages (C++, Rust)

- The programmer has to specify the data type for a variable or object in the code itself and they are checked at compile time
- Benefits: safety (catches errors early), possibly more performant
- Downsides: more tedious and less flexible

Strongly but dynamically-typed languages (e.g. Python)

- Python features *dynamic typing*. There is no need to explicitly declare variables as being a specific data type, and it does allow limited implicit conversions, but not as extensively - as e.g. JavaScript.

Weakly-typed languages (e.g. Javascript)

- Allows extensive type *coercion*; mixing-and-matching of datatypes freely e.g. 5+”2”=“52”


:::

::: {.column width="35%"}
<figure style="display: flex; flex-direction: column; align-items: center; margin: 0;">
  <img src="images/data-types-2a.jpg" />
  <figcaption style="margin-top: 0.1em; line-height: 1.2;">https://remotescout24.com/en/blog/806-typed-vs-untyped-programming-languages</figcaption>
</figure>

<figure style="display: flex; flex-direction: column; align-items: center; margin: 0;">
  <img src="images/data-types-2b.png" />
  <figcaption style="margin-top: 0.1em; line-height: 1.2;">C++. This code generates a type error; we tried to assign a string value to an int</figcaption>
</figure>

<figure style="display: flex; flex-direction: column; align-items: center; margin: 0;">
  <img src="images/data-types-2c.png" />
  <figcaption style="margin-top: 0.1em; line-height: 1.2;">JavaScript. This is valid JS code and ends with z being a string with the content “52”</figcaption>
</figure>

:::

# Data types in Python {.r-fit-text style="font-size:24pt"}

## Assigning a type to a variable {.r-fit-text style="font-size:24pt"}

## Booleans {.r-fit-text style="font-size:24pt"}

## Numeric types {.r-fit-text style="font-size:24pt"}

## Data structures {.r-fit-text style="font-size:24pt"}

## Strings {.r-fit-text style="font-size:24pt"}

## Lists {.r-fit-text style="font-size:24pt"}

## Dictionaries {.r-fit-text style="font-size:24pt"}

# Manipulating data types

## Conversion (casting)