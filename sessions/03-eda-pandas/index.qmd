---
title: "Exploring Data Using Pandas"
format:
  html: default
  ipynb: default
---

This is the first of four sessions looking at how to explore data in Python. This session will focus on introducing the Python library, [pandas](https://pandas.pydata.org/docs/). We will use pandas to import, inspect, summarise, and transform the data, illustrating a typical exploratory data analysis workflow.

We are using [Australian weather data](https://www.kaggle.com/datasets/jsphyg/weather-dataset-rattle-package), taken from [Kaggle](https://kaggle.com). This dataset is used to build machine learning models that predict whether it will rain tomorrow, using data about the weather every day from 2007 to 2017. To download the data, click <a href="data/weatherAUS.csv" download>here</a>.

::: {.callout-note}
### Please note!
We assume that you've created a `uv` project with packages `jupyter`, `pandas`, `numpy` and `seaborn`, and have created a blank notebook in this project and opened it in VS Code. If you're not sure how to do this, please refer back to sessions 1 and 2.
:::

## Prep work

Place the `weatherAUS.csv` file you downloaded in a folder called `data` within your project folder.

There's also one more package we need, called `skimpy`. In your terminal (PowerShell), from within your project folder:

```sh
uv add skimpy
```

Then, in your JuPyter notebook in VS Code, create a code cell and start by importing the packages we'll need.

```{python}
#| label: setup

# Importing packages. This won't work if we didn't add them to our project using uv earlier.
import matplotlib.pyplot as plt # "plt" (and np, pd, etc below) are called aliases. These are just for convenience and aren't essential...
import numpy as np              # ...but it's more convenient to type "np" or "pd". We can choose whatever alias we want...
import pandas as pd             # ...but it's good to stick with common conventions like "pd" for pandas.
import seaborn as sns           

from skimpy import skim
```

```{python}
#| label: import-data

# import the dataset using the read_csv function from pandas.
df = pd.read_csv('data/weatherAUS.csv') # we're giving our dataframe the name df - we could have chosen whatever we liked.
```

## Setting the Scene

Before we start to explore any dataset, we need to establish what we are looking to do with the data. This should inform our decisions wwith any exploration, and any analysis that follows.

**Questions:**

- What are we trying to achieve?
- How do our goals impact our analysis?
- What should we take into consideration before we write any code?
- What sort of questions might we be interested in with this dataset?

### What Our Data Can Tell Us (And What it Can't)

We also need to consider what the data is and where it came from.

**Questions:**

- How was the data collected?
- What is it missing?
- What do the variables in our dataset actually mean, and are they a good approximation of the concepts we are interested in?

## Exploring the Dataset

First, we should start with dataset-wide operations.

**Questions:**

- What do we want to know about a dataset when we first encounter it?
- How do we get a quick overview of the data that can help us in our next steps?
- We need to get a "feel" for the data before we can really make any decisions about how to analyse it. How do we get there with a new dataset?

We can start by getting a quick glance at the data. The starting point when you have just imported a new dataset is usually the pandas function `.head(n)`, which shows the top $n$ rows of the dataset (by default, if we don't specify a number, it shows the top five rows).

```{python}
#| label: inspect-data-head

# view the top five rows
df.head()
```

You can also look at the bottom rows of the dataset, using `.tail(n)`. This might be useful if you are dealing with time-series data. Below, we specify that we want to look at the bottom ten rows.

```{python}
#| label: inspect-data-tail

# view the bottom ten rows
df.tail(10)
```

A quick glimpse at the data is useful, but we may also want to get quick descriptions of several aspects of the data. Such as the length of the dataset (`len()`, which can also be used to get the length of various Python objects), which tells us how many observations we have.

```{python}
#| label: data-length

# get the object length
len(df)
```

Another option is `pd.DataFrame.shape()`, which shows the length (number of rows) and width (number of columns).

```{python}
#| label: data-shape

# get the object shape (number of rows, number of columns)
df.shape
```

Speaking of columns, if we want a quick list of the column names, we can get this using `pd.DataFrame.columns()`.

```{python}
#| label: col-names

# get all column names
df.columns
```

A quick and easy way to get some valuable information about the dataset is `pd.DataFrame.info()`, including the total non-null observations and data type[^Types] of each column.

```{python}
#| label: data-info

# get dataframe info (column indices, non-null counts, data types)
df.info()
```

If we wanted to get a better sense of the null values in each column, we could calculate the percentage of null values by capturing whether each row of each column is null (`pd.DataFrame.isnull()`), summing the total null values in each column (`pd.DataFrame.sum()`), and then dividing by the length of the dataframe (`/len()`).

```{python}
#| label: null-values-percent

# calculate the percentage of null values in each column
df.isnull().sum()/len(df)
```

If we want a quick summary of all the numeric columns in the dataset, we can use `pd.DataFrame.describe()`.

```{python}
#| label: describe-data

# quick summary of numeric variables
df.describe()
```

However, I prefer to bring in another package, skimpy, that does all of this very quickly and cleanly. We can get a detailed description of the entire dataset using `skim()`.

```{python}
#| label: summarise-data

# a more informative summary function from the skimpy package
skim(df)
```

[^Types]:

For more information about pandas data types, check out the pandas documentation on [dtypes](https://pandas.pydata.org/pandas-docs/stable/user_guide/basics.html#basics-dtypes).

## Exploring Variables (Columns) & Observations (Rows)

If we are going to narrow our focus to specific variables or groups of observations, we need to know how to select columns, filter values, and group the data. There are lots of different ways we can slice up the data. We won't cover all of them here[^Docs], but we will try to cover a range that helps illustrate how pandas works and will help you build the intuition for working with data in pandas.

We can select columns in a variety of ways, but the "correct" way to select columns in most circumstances is using selection brackets (the square brackets `[]`), also known as the indexing operator.

```{python}
#| label: select-col

# selecting a single column by name
df['Date']

# alternative ways to select columns
# df.loc[:, 'Date']
# df.Date
```

If we want to select multiple columns, we can use double squared brackets (`[[ ]]`). This is the same process as before, but the inner brackets define a list, and the outer are the selection brackets.

```{python}
#| label: select-multiple-cols

# selecting multiple columns (and all rows) by name
df[['Date', 'Location', 'Rainfall']]
# df.loc[:, ['Date', 'Location', 'Rainfall']]
```

While selection brackets are a quick and easy solution if we want to grab a subset of variables in the dataset, it is realy only intended to be used for simple operations using only column selection.

For row selection, we should use `pd.DataFrame.iloc[]`. The `iloc` function is used for "integer position" selection, which means you can select rows or columns using their integer position. For rows 10-15, you can select them using the following:

```{python}
#| label: subset-rows

# slicing by rows
df.iloc[10:16]
```

We can do similar using a column's integer position, but we have to select all rows (`:`) first:

```{python}
#| label: col-iloc


# using iloc with columns
df.iloc[:, 20]
```

Finally, we can put both together to take a subset of both rows and columns:

```{python}
#| label: col-rows-iloc

# using iloc with rows and columns
df.iloc[10:16, 20]
```

However, selecting by integer position is relatively limited. It is more likely we would want to subset the data based on the values of certain columns. We can filter rows by condition using `pd.DataFrame.loc[]`. The `loc` function slices by label, instead of integer position.

For example, we might want to look at a subset of the data based on location.

```{python}
#| label: filter-location

# select all observations in Perth
df.loc[df['Location'] == 'Perth']
```

We can also filter by multiple values, such as location and rainfall.

```{python}
#| label: filter-multiple-vals

df.loc[(df['Rainfall'] == 0) & (df['Location'] == 'Perth')]
```

For any complex process for subsetting the data, including multiple conditions, `pd.DataFrame.loc[]` is the best bet.

[^Docs]:

For more information, I'd recommend the [pandas documentation](https://pandas.pydata.org/docs/), and this pandas tutorial on [subsetting data](https://pandas.pydata.org/docs/getting_started/intro_tutorials/03_subset_data.html).

### Summarising Data

Now that we know how to select the variables or observations we are interested in, we can start doing some descriptive analysis. The operations we use will depend on the questions we are trying to answer, and the possibilities will be almost endless.

**Questions:**

- What "functions" might we need to carry out on our data when we are exploring it?

We know that the weather data includes observations from all over the country, but we might want to check exactly how many different locations there are. We can use `pd.DataFrame.nunique()` to do this.

```{python}
#| label: count-unique

# count unique values
df['Location'].nunique()
```

We may also be interested in the locations themselves, which may tell us more about the spatial distribution of our data. In this case, we can use `pd.DataFrame.unique()`.

```{python}
#| label: unique-vals

# get unique values
df['Location'].unique()
```

Another common operation we might look to do is calculating the mean value (`pd.DataFrame.mean()`) of a certain variable. What is the average value of sunshine across the entire dataset?

```{python}
#| label: simple-mean

# calculate variable mean
df['Sunshine'].mean()
```

This gives us the mean to many decimal places, and we probably don't need to know the average sunshine hours to this level of precision. We can use the `pd.DataFrame.round()` function to round to two decimal places.

```{python}
#| label: rounded-mean

# round mean value
df['Sunshine'].mean().round(2)
```

Many operations will return the value with information about the object's type included. The above values are wrapped in `np.float64()` because `pd.DataFrame.mean()` uses numpy to calculate the mean value. However, if you want to strip this information out so you only see the value itself, you can use `print()`.

```{python}
#| label: print-values

# print mean value
print(df['Sunshine'].mean().round(2))
```

While we are often interested in the mean value when we talk about averages, we might want to know the median instead (`pd.DataFrame.median()`).

```{python}
#| label: median

# calculate other summary statistics
print(df['Sunshine'].median())
```

Another common calculation is summing values (`pd.DataFrame.sum()`). We can use `sum()` to see the total hours of sunshine in our dataset, and we can use `int()` to convert this value to an integer (which also means we don't need to use `print()`[^Print]).
```{python}
#| label: sum

# calculate sum value and return an integer
int(df['Sunshine'].sum())
```

We can also apply these summary operations on multiple variables, using the same selection logic as before (using double squared brackets).

```{python}
#|label: summarise-multiple-cols

print(df[['Sunshine', 'Rainfall']].mean())
```

And we can apply multiple functions, using `pd.DataFrame.agg()`.

```{python}
#| label: agg

df['Sunshine'].agg(['mean', 'median', 'sum']).round(1)
```

The next step when exploring specific variables will often be group-level summaries. The average amount of sunshine across the whole dataset has limited utility, but the average hours of sunshine in each location allows us to compare between locations and start to understand how different variables are related to each other. If we want to do a group-level operation, we have to use `pd.DataFrame.groupby()`.

```{python}
#| label: group-means

# calculate group means
df.groupby(by='Location')['Sunshine'].mean().round(1)
```

The `groupby(by='Location')` function tells us the grouping variable (location), then we select the variable we want to summarise by location (sunshine), and then we specify the operation (mean).

There are multiple locations that return `NaN` (**N**ot **a** **N**umber). This indicates that numpy was unable to calculate a mean value for those locations. This is likely to be because all sunshine values for those locations are null.

We can check this using `pd.DataFrame.count()`, which counts the total non-null values (whereas `pd.DataFrame.size()` counts the total values).

```{python}
#| label: count-group-non-nulls

# group by location and count non-null sunshine values
df.groupby('Location')['Sunshine'].count()
```

The results show that all the locations that return `NaN` in our group mean calculation have zero non-null values.

[^Print]:

Some functions should be wrapped in `print()` in order to return a value that is easy to read, but others won't. There will be an internal logic for which is which, but it's not of huge importance to us. You are better off just testing functions out and wrapping them in `print()` if necessary.

## Transforming Data

Datasets are rarely perfectly clean and [tidy](https://vita.had.co.nz/papers/tidy-data.pdf). We often need to transform the data before we can get the most out of it.

**Questions:**

- What sort of transformations would help us get the most out of the analysis of the Australian weather data?

The first step with any analysis is often converting columns to the correct types. With a longitudinal (time-series) dataset,the date column is a good place to start. We can use `pd.DataFrame.dtypes` to check the data type, either of a single column (using the selector brackets) or all columns in the dataset.

```{python}
#| label: data-types

print(df.dtypes)
```

All columns are either stored as `object` or `float64`. The `object` data type is for generic non-numeric data, but from the columns that are stored as objects, we can tell this is mostly categorical variables where the categories are represented as text. The float64 data type refers to data that is numeric and includes decimals (float64 = 64-bit floating point number).

The date column is stored as an object, but pandas can store dates as `datetime64`. We can convert dates using `pd.to_datetime()`. When transforming data, if we want to keep those transformations, we have to store those changes, using `=`. In this case, we want to convert the date column but we don't want to create an entirely new dataframe to handle this change, so we can overwrite the current date column by using the selection brackets to identify the column we want to apply this change to.

```{python}
#| label: convert-to-datetime

# convert date column to datetime
df['Date'] = pd.to_datetime(df['Date'])
```

The remaining `object` columns can be converted to categorical, which makes them easier to work with in subsequent analyses. We can use `pd.DataFrame.astype()` to convert column data types.

```{python}
#| label: convert-cols

# create a list of all object columns
object_cols = ['Location', 'WindGustDir', 'WindDir9am', 'WindDir3pm', 'RainToday', 'RainTomorrow']

# convert object columns to category
df[object_cols] = df[object_cols].astype('category')
```

A more efficient, though synactically more complex, way of doing this is using lamda functions. We won't cover lambda functons in this session (they will be discussed in detail in a future session), but below is how we can use them to convert objects to categories.

```{python}
#| label: convert-to-cat

# convert object columns to category data type
df = df.apply(lambda x: x.astype('category') if x.dtype == 'object' else x)
```

Another choice we might make is to remove missing values, using `pd.DataFrame.dropna()` to filter the null values and keep only the non-null values. We can use this to drop all null values across the entire dataset, or we can apply it to a subset of columns, using the `subset` argument.

```{python}
#| label: filter-not-null

# filter observations where sunshine is NA
df.dropna(subset='Sunshine')
```

We haven't stored this transformation, because filtering nulls without careful consideration is a bad idea, but it's useful to know, nonetheless.

There are lots of ways we could transform the data, but the final example we will consider here is reshaping the data using `pd.DataFrame.pivot()`, which transforms the data from long to wide format data, and `pd.DataFrame.melt()`, which transforms it from wide to long format.

Perhaps we want to focus on the maximum temperature per day in each location in 2015. We can use `pd.Series.dt.year` to get the year from the date column, and filter for the year 2015, before reshaping the data.

```{python}
#|label: pivot

df2015 = df.loc[df['Date'].dt.year == 2015]
df_wide = df2015.pivot(index='Date', columns='Location', values='MaxTemp')

df_wide.head()
```

Perhaps we want to look at the maximum and minimum temperatures in each location, together. We can reshape the data to support this[^Viz].

```{python}
#| label: melt

df_long = df2015.melt(
    id_vars=['Date', 'Location'],
    value_vars=['MaxTemp', 'MinTemp'],
    var_name='Variable',
    value_name='Value'
)

df_long.head()
```

[^Viz]:

This is often very useful when we need to visualise data, for example plotting the max and min temp for each location, is easier if the values are organised in the same column and differentiated using another column.

## Exercises

Some of these questions are easily answered by scrolling up and finding the answer in the output of the above code, however, the goal is to find the answer using code. No one actually cares what the answer to any of these questions is, it's the process that matters!

**Remember, if you don't know the answer, it's okay to Google it (or speak to others, including me, for help)!**

```{python}
#| label: reset-data
#| code-fold: true
#| code-summary: 'Import Data (to Reset)'

# import the dataset
df = pd.read_csv('data/weatherAUS.csv')
```

1. What is the 'Sunshine' column's data type?

::: {.callout-note title="Solution" collapse="true"}

```{python}
#| label: col-type

# What is the 'Sunshine' column's data type?
print(df['Sunshine'].dtypes)
```

:::

2. Identify all the columns that are of dtype 'object'.

::: {.callout-note title="Solution" collapse="true"}

```{python}
#| label: object-cols

# Identify all the columns that are of dtype 'object'
print(list(df.select_dtypes(include=['object'])))
```

:::

3. How many of the dataframe's columns are of dtype 'object'?

::: {.callout-note title="Solution" collapse="true"}

```{python}
#| label: count-object-cols

# How many of the dataframe's columns are of dtype 'object'?
len(list(df.select_dtypes(include=['object'])))
```

:::

4. How many of the 'Rainfall' column values are NAs?

::: {.callout-note title="Solution" collapse="true"}

```{python}
#| label: count-rainfall-nulls

# How many of the 'Rainfall' column values are NAs?
print(df['Rainfall'].isna().sum())
```

:::

5. Create a new dataframe which only includes the 'Date', 'Location, 'Sunshine', 'Rainfall', and 'RainTomorrow' columns.

::: {.callout-note title="Solution" collapse="true"}

```{python}
#| label: subset-data

new_df = df[['Date', 'Location', 'Sunshine', 'Rainfall', 'RainTomorrow']]
new_df.head()
```

:::

6. Convert 'RainTomorrow' to a numeric variable, where 'Yes' = 1 and 'No' = 0.

::: {.callout-note title="Solution" collapse="true"}

```{python}
#| label: numeric-outcome

# df['Location'].astype('category').cat.codes
# df['RainTomorrow'].astype('category').cat.codes
df['RainTomorrow'].map({'Yes': 1, 'No': 0})
```

:::

7. What is the average amount of rainfall for each location?

::: {.callout-note title="Solution" collapse="true"}

```{python}
#| label: avg-rainfall-location

# average rainfall by location, sorted by value
df.groupby('Location')['Rainfall'].mean().sort_values(ascending=False)
```

:::

8. What is the average amount of rainfall for days that it will rain tomorrow?

::: {.callout-note title="Solution" collapse="true"}

```{python}
#| label: avg-rainfall-rain-tomorrow

# average rainfall depending on whether it will rain tomorrow or not
df.groupby('RainTomorrow')['Rainfall'].mean()
```

:::

9. What is the average amount of sunshine in Perth when it will not rain tomorrow?

::: {.callout-note title="Solution" collapse="true"}

```{python}
#| label: avg-sunshine-perth-no-rain

# average sunshine in Perth when it won't rain tomorrow
df.loc[(df['Location'] == 'Perth') & (df['RainTomorrow'] == 'No'), 'Sunshine'].mean()
# df[(df['Location']=='Perth') & (df['RainTomorrow']=='No')]['Sunshine'].mean()
```

:::

10. We want to understand the role that time plays in the dataset. Using the original dataframe, carry the following tasks and answer the corresponding questions:
    - Create columns representing the year and month from the 'Date' column. How many years of data are in the dataset?
    - Examine the distribution of the 'Sunshine' NAs over time. Is time a component in the 'Sunshine' data quality issues?
    - Calculate the average rainfall and sunshine by month. How do rainfall and sunshine vary through the year?
    - Calculate the average rainfall and sunshine by year. How have rainfall and sunshine changed over time?

::: {.callout-note title="Solution" collapse="true"}

```{python}
#| label: unique-years

# get year and month columns
df = (
    df.assign(Date=pd.to_datetime(df['Date']))
    .assign(
        Year=lambda x: x['Date'].dt.year,
        Month=lambda x: x['Date'].dt.month
    )
)

# count unique years
df['Year'].nunique()
```


```{python}
#| label: sunshine-nulls-over-time

# lambda function counting nulls by year
df.groupby('Year')['Sunshine'].apply(lambda x: x.isna().sum())
```


```{python}
#| label: rainfall-sunshine-by-month

# rainfall and sunshine by month
df.groupby('Month')[['Rainfall', 'Sunshine']].mean().round(1)
```


```{python}
#| label: rainfall-sunshine-by-year

# rainfall and sunshine by year
df.groupby('Year')[['Rainfall', 'Sunshine']].mean().round(1)
```

:::