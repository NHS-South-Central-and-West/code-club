{
  "hash": "4610331ee90f1962aa6056ed57232fcf",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Regression Fundamentals: Comparing Samples\"\nformat:\n  html: default\n  ipynb: default\n---\n\nThis notebook is the first in a five-part series covering foundational statistics and the building blocks for regression modelling. This session walks through the process of comparing samples, demonstrating **why** comparisons matter and how we approach them, and applies these ideas using data on fatal car crashes in the U.S.\n\nWe will discuss why we compare groups in data analysis, the differences between population and sample data, how to visualise and interpret group differences, and how to assess whether differences are statistically meaningful.\n\nThe goal of this session is for everyone to understand the role of comparison in statistics, as well as to recognise what comparisons between groups can tell us and what their limitations are.\n\n## Why Compare?\n\nComparison is fundamental to how we learn from data. When we observe something in data, whether it is a specific observation, a broader pattern across observations, or the outcome of a calculation, we need context to understand its meaning. Is this value high or low? Is it unusual? Should we pay more attention to it?\n\nImagine an online store making changes to its website with the intention of boosting sales. After a week, the changes made generated £250k in sales. Is that good? We don't know because we don't have anything to compare against. The store could compare this figure to the sales from the previous week. Better yet, they could run the original version of the website concurrently alongside the new version, serving different versions of the website to users at random, to more directly compare sales. If the original version of the website generated only £230k in sales, we now have a meaningful comparison that suggests that the new version of the site may boost sales.\n\nRaw numbers rarely tell us complete stories. A patient's blood pressure is only meaningful because we know what a healthy range is, and we can use this for comparison. Without comparison, data is meaningless.\n\n### What does Comparison Really Tell Us?\n\nWhen we compare two groups in our data, what we _really_ want to know is whether those groups differ in the real world, not just whether they differ in the data. The comparison in the data serves as a proxy for understanding differences in the wild. The data is a \"sample\" of what the real world (the population) looks like. But suppose we see a difference between two groups in our data. How do we know if that reflects a difference that is occurring in the population, instead of being caused by random variation in the data?\n\nSeparating real patterns, or signal, from the noise in data is a fundamental part of statistics and is the driving force behind everything in statistical inference. Good comparisons account for the possibility of random variation and consider the ways in which the comparisons we are making may be flawed or incomplete. If the online store compared the previous week's sales, this would still be useful, but what if the previous week included a holiday that led to a significant boost of sales, or the week the new site was launched was payday for a lot of customers? It is important to consider whether your comparison is really meaningful.\n\n**Questions:**\n\n- How do you currently decide whether the difference you observe in your data is real or occurred by chance?\n- Why is it important to know if differences observed in data occurred by chance?\n\n### Population vs. Sample\n\nThe population is every possible unit or observation relevant to what you are studying, while the sample is a subset of the population. If you wanted to estimate how income affects housing prices in UK cities, the population would be every city in the UK. A sample would be data covering a handful of (hopefully representative) cities.\n\n![Source: [Martijn Wieling](https://www.let.rug.nl/wieling/Statistiek-I/HC2/)](images/popsample.png)\n\nIf we had access to the entire population, comparisons would be straightforward. However, we usually don't, so we have to take a sample of the population and make inferences about the population based on our sample. That means dealing with uncertainty, variation, and potential bias.\n\nTo compare groups responsibly, we need to consider how sampling affects what we observe and how it may limit our ability to make accurate comparisons. The sample is a small snapshot of the population, and there are several reasons why it might not be representative of the wider population.\n\nBelow is an example illustrating the difference between the population and the sample, simulating drawing ten cards from a standard deck and calculating the average value of the cards drawn.\n\n::: {#population-vs-sample .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport random\n\n# simulate drawing 10 cards from a standard deck\ndeck = list(range(1, 14)) * 4\n\n# draw two random samples of ten cards\nsample1 = random.sample(deck, 10)\nsample2 = random.sample(deck, 10)\n\n# compute sample means\nsample_mean1 = np.mean(sample1)\nsample_mean2 = np.mean(sample2)\n\n# compute population mean\npopulation_mean = np.mean(deck)\n\nprint(f\"Sample means: {sample_mean1}, {sample_mean2}\")\nprint(f\"Population mean: {population_mean}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSample means: 7.8, 6.6\nPopulation mean: 7.0\n```\n:::\n:::\n\n\nWe have taken two samples from the population. Their mean values are 7\\.8 and 7\\.8, which vary slightly from the population mean (7\\.0). Why do the sample means differ from each other and the population mean?\n\nSampling variability is inevitable. Each sample captures only a slice of the full population, and in small samples, this can lead to significant variances in the sample and population means. Perhaps the first ten cards drawn from the deck have a high number of face cards, or the second sample has lots of 2s, 3s, and 4s. Even if the process for drawing a sample is fair, individual samples will always vary. This is a core challenge of inference. We rely on well-designed comparisons to manage these uncertainties, using statistical tools that help us determine whether sample-level observations likely reflect real population-level differences.\n\n## Comparing Car Crash Fatalities - High or Not?\n\nNow we can apply this logic to a real-world dataset. We will use a [Tidy Tuesday](https://github.com/rfordatascience/tidytuesday/blob/main/data/2025/2025-04-22/readme.md) dataset that records the daily count of fatal U.S. car crashes from 1992–2016, originally from a [study into the effects of the annual cannabis holiday (4:20pm to 11:59pm on April 20th), 4/20, on fatal car accidents](https://injuryprevention.bmj.com/content/25/5/433). \n\nWhile previous research has concluded that fatalities are higher on 4/20, suggesting that the holiday is the cause of the increase, Harper and Palayew find no evidence for an increase in fatalities on 4/20, but they do find an increase for other holidays like July 4th. We will investigate whether we can see a spike in fatalities on 4/20 by comparing 4/20 with other days of the year.\n\n### Import & Process Data\n\n::: {#cell-import-data .cell execution_count=2}\n``` {.python .cell-code}\nimport pandas as pd\n\n# load data\nraw_420 = pd.read_csv('data/daily_accidents_420.csv', parse_dates=['date'])\n\n# inspect data\nraw_420.head()\n```\n\n::: {#import-data .cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>e420</th>\n      <th>fatalities_count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1992-01-01</td>\n      <td>False</td>\n      <td>144</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1992-01-02</td>\n      <td>False</td>\n      <td>111</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1992-01-07</td>\n      <td>False</td>\n      <td>85</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1992-01-12</td>\n      <td>False</td>\n      <td>127</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1992-01-03</td>\n      <td>False</td>\n      <td>182</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nAs always, we need to do some checks to inspect data quality and identify any potential issues.\n\n::: {#cell-count-missing-values .cell execution_count=3}\n``` {.python .cell-code}\n# count missing values\nraw_420.isna().sum()\n```\n\n::: {#count-missing-values .cell-output .cell-output-display execution_count=3}\n```\ndate                 0\ne420                13\nfatalities_count     0\ndtype: int64\n```\n:::\n:::\n\n\n::: {#cell-inspect-missing-values .cell execution_count=4}\n``` {.python .cell-code}\n# inspect missing values\nraw_420.loc[raw_420['e420'].isna()]\n```\n\n::: {#inspect-missing-values .cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>e420</th>\n      <th>fatalities_count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1099</th>\n      <td>1994-04-20</td>\n      <td>NaN</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1428</th>\n      <td>1995-04-20</td>\n      <td>NaN</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>1834</th>\n      <td>1996-04-20</td>\n      <td>NaN</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2201</th>\n      <td>1997-04-20</td>\n      <td>NaN</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>3301</th>\n      <td>2000-04-20</td>\n      <td>NaN</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4400</th>\n      <td>2003-04-20</td>\n      <td>NaN</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>5485</th>\n      <td>2006-04-20</td>\n      <td>NaN</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>5867</th>\n      <td>2007-04-20</td>\n      <td>NaN</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>6234</th>\n      <td>2008-04-20</td>\n      <td>NaN</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>6968</th>\n      <td>2010-04-20</td>\n      <td>NaN</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>7702</th>\n      <td>2012-04-20</td>\n      <td>NaN</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>8393</th>\n      <td>2014-04-20</td>\n      <td>NaN</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>8802</th>\n      <td>2015-04-20</td>\n      <td>NaN</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#cell-inspect-420 .cell execution_count=5}\n``` {.python .cell-code}\n# inspect 04/20 values\nraw_420.loc[raw_420['date'] == '1994-04-20']\n```\n\n::: {#inspect-420 .cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>e420</th>\n      <th>fatalities_count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>951</th>\n      <td>1994-04-20</td>\n      <td>True</td>\n      <td>47</td>\n    </tr>\n    <tr>\n      <th>1098</th>\n      <td>1994-04-20</td>\n      <td>False</td>\n      <td>63</td>\n    </tr>\n    <tr>\n      <th>1099</th>\n      <td>1994-04-20</td>\n      <td>NaN</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThere are several observations where values for `e420` are missing. All of the missing values are on 4/20, but closer inspection shows that there are multiple observations for these days. This appears to be because `e420 == True` only for the time period covering the holiday (which isn't the entire day), and the NAs are likely to be crashes where the exact time was undetermined and may or may not fall in the 4/20 window. \n\nWe will transform the data to take the sum value of all 4/20 fatalities, for simplicity[^Simplicity], and select the columns we want to use in our analysis. \n\n::: {#transform-data .cell execution_count=6}\n``` {.python .cell-code}\ndf = (\n    raw_420\n    # group by date, sum fatalities\n    .groupby(['date'], as_index=False)['fatalities_count'].sum()\n    # add 4/20 and 7/4 indicators\n    .assign(\n        is_420=lambda d: pd.to_datetime(d['date']).dt.strftime('%m-%d').eq('04-20'),\n        is_july4=lambda d: pd.to_datetime(d['date']).dt.strftime('%m-%d').eq('07-04')\n        )\n)\n```\n:::\n\n\n::: {#cell-check-data .cell execution_count=7}\n``` {.python .cell-code}\ndf.head()\n```\n\n::: {#check-data .cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>fatalities_count</th>\n      <th>is_420</th>\n      <th>is_july4</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1992-01-01</td>\n      <td>144</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1992-01-02</td>\n      <td>111</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1992-01-03</td>\n      <td>182</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1992-01-04</td>\n      <td>152</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1992-01-05</td>\n      <td>99</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nFirst, lets calculate the mean value of fatalities on 4/20 and all other days, to see whether there is an obvious spike.\n\n::: {#cell-group-means .cell execution_count=8}\n``` {.python .cell-code}\n(\n    df\n    .groupby('is_420')['fatalities_count']\n    .mean()\n    .round(2)\n)\n```\n\n::: {#group-means .cell-output .cell-output-display execution_count=8}\n```\nis_420\nFalse    145.09\nTrue     139.32\nName: fatalities_count, dtype: float64\n```\n:::\n:::\n\n\nInstead, the average number of fatalities is slightly lower than the average across the rest of the year.\n\nWe can also add July 4th to our comparison, to see if other holidays cause a spike in the average number of fatalities.\n\n::: {#cell-group-means-with-july4 .cell execution_count=9}\n``` {.python .cell-code}\n(\n    df.groupby(['is_420', 'is_july4'], as_index=False)['fatalities_count']\n    .mean()\n    .round(2)\n)\n```\n\n::: {#group-means-with-july4 .cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>is_420</th>\n      <th>is_july4</th>\n      <th>fatalities_count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>False</td>\n      <td>False</td>\n      <td>145.01</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>False</td>\n      <td>True</td>\n      <td>176.00</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>True</td>\n      <td>False</td>\n      <td>139.32</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThere are a lot more fatalities from car crashes on July 4th than the rest of the year (including 4/20). This gives us a good starting point to start digging further into the data.\n\n[^Simplicity]:\n\nThis is definitely not an appropriate way to deal with this problem if we were being precise, but in order to save on time this approach makes sense. For a more complete analysis, check out the [Harper & Palayew](https://injuryprevention.bmj.com/content/25/5/433) paper this data is taken from.\n\n### Visual Comparisons\n\nWe can make comparisons in a variety of ways, from describing the difference between samples using descriptive measures (such as the mean value) to carrying out statistical tests that estimate the likelihood that observed differences between samples occur in the population. Visualising data is an effective way to make quick comparisons between samples. We can identify visual patterns much faster than we can using descriptive measures.\n\nWe can start by plotting our data to better understand how fatalities vary over time and how the number of car crash fatalities on 4/20 and July 4th compare to the rest of the year.\n\n::: {#cell-fig-time-series .cell execution_count=10}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.figure(figsize=(15, 8))\n\n# line plot of daily fatalities\nsns.lineplot(data=df, x='date', y='fatalities_count', color=\"#0081a7\", linewidth=0.25, alpha=0.8)\n\n# scatter plot for 4/20\nsns.scatterplot(\n    data=df.loc[df['is_420']],\n    x='date', y='fatalities_count',\n    color='#ef233c', label='4/20',\n    s=100\n)\n\n# scatter plot for 7/4\nsns.scatterplot(\n    data=df.loc[df['is_july4']],\n    x='date', y='fatalities_count',\n    color='#ffb703', label='7/4',\n    s=100\n)\n\nplt.xlabel('Date')\nplt.ylabel('Car Crash Fatalities')\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![Daily Fatalities (1992-2016)](index_files/figure-ipynb/fig-time-series-output-1.png){#fig-time-series}\n:::\n:::\n\n\n@fig-time-series shows that there is clearly a seasonal trend in daily car crash fatalities, and there is significant variance in fatalities on both 4/20 and July 4th. While this plot does tell us a lot about the data, it hasn't made comparison easier.\n\nWe can visualise the distribution of samples as a way to make comparisons. This can help us identify differences in the shape of the samples, which tells us a lot. @fig-raw-distributions below compares 4/20 and all other days.\n\n::: {#cell-fig-raw-distributions .cell execution_count=11}\n``` {.python .cell-code}\nplt.rcParams['figure.figsize'] = [12,6]\n\n# define colour palette\ncustom_palette = {False: '#0081a7', True: '#ef233c'}\n\n# histogram\nplt.subplot(1, 2, 1)\nsns.histplot(data=df, x='fatalities_count', hue='is_420', kde=True, palette=custom_palette)\nplt.title('Histogram')\n\n# boxplot\nplt.subplot(1, 2, 2)\nsns.boxplot(data=df, x='is_420', y='fatalities_count', hue='is_420', palette=custom_palette, legend=False)\nplt.xticks([0, 1], ['Other Days', '4/20'])\nplt.title('Boxplot')\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![Distribution of Fatalities on 4/20 & Other Days](index_files/figure-ipynb/fig-raw-distributions-output-1.png){#fig-raw-distributions}\n:::\n:::\n\n\nThe imbalance between 4/20 and other days in the year makes it impossible to really see what is going on in our histogram. \n\nWe can normalise the two distributions such that the total area of both equals one. This preserves their shape but accounts for the count imbalance between the two. We can also replace the boxplot with a violin plot, which will give us a little more intuition for the shape of the two groups.\n\n::: {#cell-fig-normalised-420 .cell execution_count=12}\n``` {.python .cell-code}\nplt.subplot(1, 2, 1)\nsns.histplot(data=df, x='fatalities_count', hue='is_420', palette=custom_palette, kde=True, stat='density', common_norm=False)\nplt.title('Density-Normalised Histogram')\n\nplt.subplot(1, 2, 2)\nsns.violinplot(data=df, x='is_420', y='fatalities_count', inner='quart', hue='is_420', palette=custom_palette, legend=False)\nplt.xticks([0, 1], ['Other Days', '4/20'])\nplt.title('Violin Plot')\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![(Normalised) Distribution of Fatalities on 4/20 & Other Days](index_files/figure-ipynb/fig-normalised-420-output-1.png){#fig-normalised-420}\n:::\n:::\n\n\nThere is minimal difference between the two distributions in @fig-normalised-420, though the peak of the 4/20 distribution does appear to be slightly lower than the other days. \n\nWe can also visualise the distribution of fatalities on July 4th, for comparison.\n\n::: {#cell-fig-normalised-july4 .cell execution_count=13}\n``` {.python .cell-code}\ncustom_palette = {False: '#0081a7', True: '#ffb703'}\n\nplt.subplot(1, 2, 1)\nsns.histplot(data=df, x='fatalities_count', hue='is_july4', palette=custom_palette, kde=True, stat='density', common_norm=False)\nplt.title('Density-Normalised Histogram')\n\nplt.subplot(1, 2, 2)\nsns.violinplot(data=df, x='is_july4', y='fatalities_count', inner='quart', hue='is_july4', palette=custom_palette, legend=False)\nplt.xticks([0, 1], ['Other Days', '7/4'])\nplt.title('Violin Plot')\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![(Normalised) Distribution of Fatalities on July 4th & Other Days](index_files/figure-ipynb/fig-normalised-july4-output-1.png){#fig-normalised-july4}\n:::\n:::\n\n\nThe differences between the two distributions in @fig-normalised-july4 are a lot clearer. While there is some overlap, the July 4th distribution shows that there are generally more deaths on July 4th than on other days.\n\nThere are many ways to make comparisons visually, and the plots above are just an example of some of the approaches you can use to compare samples. It's always worth looking at the data in a variety of ways and finding the most appropriate ways to make comparisons. The right way to compare your samples depends on the question you are asking, so it's important to think carefully about your approach and what it is telling you.\n\n### Testing Comparisons\n\nVisual and descriptive comparisons are limited because they only tell us whether there is a difference. They don't help us infer whether those difference occurred due to random variation or if there is something real going on. Visual comparisons cannot tell us whether we should expect to observe the differences we see in our samples in the population.\n\nThat's where statistical tests come in! Once we've visualized potential differences, we can test whether those differences are likely to occur in the population, using a two-sample $t$-test.\n\nA $t$-test is a statistical test used to compare the means of two groups to determine if the difference between them is statistically significant. It takes into account:\n\n- The size of the difference between the two group means.\n- The variability (spread) of the data within each group.\n- The sample size (number of observations in each group).\n\nThe $t$-test calculates a p-value, which is the probability of observing a difference as extreme or more extreme than the one found, assuming there is no true difference between the groups in the population (i.e., the null hypothesis is true). The Null Hypothesis Significance Testing (NHST) framework sets a threshold (typically 0.05) where, if the $p$-value is below that threshold, you reject the null hypothesis and conclude that the difference between the groups is likely real and not due to random chance (referred to as statistically significant). \n\n{{< video https://youtu.be/0oc49DyA3hU?si=0x24ncYVQKbJP2sY >}}\n\nHowever, statistical significance and the NHST are thorny issues. Instead, it is better to think of $p$-values as continuous instead of treating them as binary. If we compute a difference (or effect size) of 0.45 with a $p$-value of 0.01, that means we'd expect to see an effect size this large less than 1% of the time by chance alone, assuming no true relationship. Whether a difference of 0.45, with a 1% chance of this occuring by chance, is enough for us to conclude this is substantively important is dependent on context.\n\n::: {.callout-note}\n\n#### Why Significance Is a Thorny Issue\n\nWhile $p$-values are widely used, they come with caveats:\n\n- Binary thinking - Treating $p$ < 0.05 as \"proof\" of an effect and rejecting $p$ > 0.05 as no effect is misleading. Evidence exists on a continuum.\n- Sample size matters - With huge samples, even tiny effects can be \"significant\". With small samples, meaningful effects might not reach the threshold.\n- Misinterpretation - A $p$-value doesn't tell us how big or important an effect is, nor the probability that the hypothesis is true.\n- Multiple testing - The more tests we run, the more likely we'll find \"significant\" results by chance (false positives).\n\nThe better approach is to treat $p$-values as one piece of evidence. Pair them with effect sizes, confidence intervals, visualizations, and context.\n\n::: \n\nLet's first carry out a $t$-test to compare fatalities on 4/20 and all other days.\n\n::: {#t-test-420 .cell execution_count=14}\n``` {.python .cell-code}\nfrom scipy.stats import ttest_ind\n\n# create our samples for comparison\ngroup_420 = df.loc[df.is_420, 'fatalities_count']\ngroup_other = df.loc[~df.is_420, 'fatalities_count']\n\n# calculate t-statistic and p-value\nt_stat, p_val = ttest_ind(group_420, group_other, equal_var=False)\nprint(f\"t-statistic = {t_stat:.3f}, p-value = {p_val:.3f}\")\n\n# calculate mean difference\nmean_diff = group_420.mean() - group_other.mean()\n\nprint(f\"Mean difference = {mean_diff:.2f}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nt-statistic = -0.863, p-value = 0.397\nMean difference = -5.77\n```\n:::\n:::\n\n\nThere is a difference in the means of the two samples of almost 6 fatalities, but the $p$-value is almost 0.4, which suggests we are very uncertain about whether this is a meaningful effect or just the product of random variation. A high $p$ suggests we probably need more data, or a more precise approach to estimating 4/20s effect, before we can draw any conclusions.\n\n{{< video https://youtu.be/vemZtEM63GY?si=8l3GMwdxxdUI2Rod >}}\n\nWhile our $t$-test found minimal evidence that there is a meaningful difference in the number of fatalities by car crash on 4/20, perhaps the bigger mean difference we saw on July 4th will be sufficient to draw some conclusions.\n\n::: {#t-test-july4 .cell execution_count=15}\n``` {.python .cell-code}\nfrom scipy.stats import ttest_ind\n\n# create our samples for comparison\ngroup_july4 = df.loc[df.is_july4, 'fatalities_count']\ngroup_other = df.loc[~df.is_july4, 'fatalities_count']\n\n# calculate t-statistic and p-value\nt_stat, p_val = ttest_ind(group_july4, group_other, equal_var=False)\nprint(f\"t-statistic = {t_stat:.3f}, p-value = {p_val:.3f}\")\n\n# calculate mean difference\nmean_diff = group_july4.mean() - group_other.mean()\n\nprint(f\"Mean difference = {mean_diff:.2f}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nt-statistic = 6.381, p-value = 0.000\nMean difference = 31.01\n```\n:::\n:::\n\n\nThere are, on average, 31 more fatalities on July 4th than the rest of the year, and the $p$-value is so small that it rounds to zero. This indicates that it is highly likely that this is a real effect that we should expect to observe in the population. \n\nHowever, it is important to note that this does not confirm our theory that the cause of this spike in fatalities is July 4th (the holiday). We are only able to conclude that this difference is not caused by random variation, but our test does not prove what has caused it.\n\n<details>\n  <summary>Using Simulation for Comparisons (Click to Expand)</summary>\n\n#### Simulation-Based Tests\n\nFor anyone that struggles to remember all the different types of statistical tests you can use to compare samples and when a particular test is appropriate, I would highly recommend learning the [Simulation-Based Testing framework](https://allendowney.blogspot.com/2016/06/there-is-still-only-one-test.html), which uses simulation methods to approximate the process that statistical tests carry out when comparing samples.\n\nA detailed explanation of how this approach to testing works is out of the scope of this session, but below is a replication of our tests using a simulation-based method.\n\n::: {#simulation-function .cell execution_count=16}\n``` {.python .cell-code}\ndef simulate_two_groups(data1, data2):\n\n    n, m = len(data1), len(data2)\n    data = np.append(data1, data2)\n    np.random.shuffle(data)\n    group1 = data[:n]\n    group2 = data[n:]\n    return group1.mean() - group2.mean()\n```\n:::\n\n\n::: {#cell-simulation-test-420 .cell execution_count=17}\n``` {.python .cell-code}\n# run 10000 simulations to test null\nnp.random.seed(42)\nsimulated_diffs = [simulate_two_groups(group_420, group_other) for _ in range(10000)]\n\n# observed mean difference\nobserved_diff = group_420.mean() - group_other.mean()\n\n# calculate p-value\ndiffs = np.array(simulated_diffs)\np_sim = np.mean(np.abs(diffs) >= np.abs(observed_diff))\n\n# plot distribution of simulated differences with p-value\nsns.histplot(diffs, kde=True, color='#0081a7')\nplt.axvline(observed_diff, color='#ef233c', linewidth=3, linestyle=\"--\", label='Observed Mean Difference')\nplt.legend(loc='upper right')\n\n# annotate p-value on the plot\nplt.text(\n    x=observed_diff+8,\n    y=plt.gca().get_ylim()[1]*0.9,\n    s=f'p-value = {p_sim:.4f}'\n    )\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![Permutation Test (4/20 Vs Other Days)](index_files/figure-ipynb/simulation-test-420-output-1.png){#simulation-test-420}\n:::\n:::\n\n\nSimulation confirms the result and emphasizes flexibility: even when assumptions are questionable, we can still test meaningfully. It also reinforces that inference is about what would happen if we repeated the experiment many times.\n\n::: {#cell-simulation-test-july4 .cell execution_count=18}\n``` {.python .cell-code}\n# run 10000 simulations to test null\nnp.random.seed(42)\nsimulated_diffs = [simulate_two_groups(group_july4, group_other) for _ in range(10000)]\n\n# observed mean difference\nobserved_diff = group_july4.mean() - group_other.mean()\n\n# calculate p-value\ndiffs = np.array(simulated_diffs)\np_sim = np.mean(np.abs(diffs) >= np.abs(observed_diff))\n\n# plot distribution of simulated differences with p-value\nplt.figure(figsize=(12, 6))\nsns.histplot(diffs, kde=True, color='#0081a7')\nplt.axvline(observed_diff, color='#ef233c', linewidth=3, linestyle=\"--\", label='Observed Mean Difference')\nplt.legend(loc='upper right')\nplt.title('')\n\n# annotate p-value on the plot\nplt.text(\n    x=observed_diff-20,\n    y=plt.gca().get_ylim()[1]*0.9,\n    s=f'p-value = {p_sim:.4f}'\n    )\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![Permutation Test (7th July Vs Other Days)](index_files/figure-ipynb/simulation-test-july4-output-1.png){#simulation-test-july4}\n:::\n:::\n\n\n</details>\n\n## Limitations of Comparison\n\nComparing samples of data can be very useful. There is descriptive value in just knowing that differences exist in the data, and this may point to a meaningful difference in the population. However, if you are trying to understand what _caused_ the differences between the two samples, comparison is not enough.\n\nOur analysis shows that there are fewer crashes on 4/20 than other days, but there was considerable uncertainty about this comparison, and the approach had significant flaws. Our comparison assumes that the only difference between 4/20 and other days in the data is the date itself, and the cultural holiday that takes place on this date. We haven't accounted for other causes of variation in the number of crashes. We haven't accounted for other holidays, weather patterns, or daily differences in the number of people on the road. \n\nComparisons only measure what we observe, not necessarily what we want to know. It is important to consider how your comparison might not answer the question you are actually asking. And it is important to consider ways that your comparison may be flawed, and what else may be going on in the data.\n\n## Wrapping Up\n\nWe've walked the workflow for carrying out comparisons using statistical methods. With these methods we can make meaningful comparisons between samples in our data. This gives us a solid foundation for carrying out analysis. We can identify differences, quantify uncertainty, and make inferences from data. But these methods have limitations. They don't account for multiple variables or continuous predictors. Context and sample size also matter.\n\nIn future sessions we will take this a step further, analysing how variables relate to each other. That lets us ask new types of questions. We'll explore how variables change together, detect trends, and lay the foundation for regression.\n\n---\njupyter:\n  kernelspec:\n    display_name: Python 3 (ipykernel)\n    language: python\n    name: python3\n    path: c:\\Users\\paul.johnson\\git\\code-club\\.venv\\share\\jupyter\\kernels\\python3\n  language_info:\n    codemirror_mode:\n      name: ipython\n      version: 3\n    file_extension: .py\n    mimetype: text/x-python\n    name: python\n    nbconvert_exporter: python\n    pygments_lexer: ipython3\n    version: 3.12.5\n---\n",
    "supporting": [
      "index_files\\figure-ipynb"
    ],
    "filters": []
  }
}