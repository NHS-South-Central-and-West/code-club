{
  "hash": "73ad6ac84ca8c0d6e8c7c21d78bd5520",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"An Introduction To Data Types\"\nfooter: '**SAT //** Intro to Data Types **//** July 2025'\nformat: \n revealjs: \n  reference-location: document\n  fig-cap-location: bottom\n  self-contained: false\n  math: false\n---\n\n# Data types overview\n\n## What are data types; why do they matter?\n\n::: columns\n\n::: {.column style=\"width:65%; font-size:20pt\"}\n- All^[experimental ternary computers and quantum computing are firmly out of scope of this presentation] computers store data in binary (1s and 0s) – example shown on the right, represented as hexadecimal\n- Variables add a level of convenience and abstraction by letting us name specific buckets to put data in, and data types give structure to these buckets. \n- In the early days of computing data was stored as raw binary\n+ The need for specific data types came from the emergence of structured programming from the 1950s onward\n+ Languages like FORTRAN and COBOL introduced the segregation of numeric datatypes and character types\n+ Object-oriented languages like C++ and Java further expanded on this with user-defined data types\n- Specifying the type of data allows the machine to allocate an appropriate amount of memory to it (was very important in the early days of computing, but still relevant)\n- Allows us to prevent errors; setting the expectation on the exact type of data that a specific variable will contain.\n:::\n\n::: {.column width=\"35%\"}\n<figure style=\"display: flex; flex-direction: column; align-items: center; margin: 0;\">\n  <img src=\"images/data-types-1a.png\" />\n  <figcaption style=\"margin-top: 0.1em; line-height: 1.2;\">Raw data in hex format (ASCII representation on right).</figcaption>\n</figure>\n\n<figure style=\"display: flex; flex-direction: column; align-items: center; margin: 0;\">\n  <img src=\"images/data-types-1b.jpg\" />\n  <figcaption style=\"margin-top: 0.1em; line-height: 1.2;\">Core rope memory. The orientation of each metal ring encodes a 0 or a 1. (Konstantin Lanzet, Wikimedia Commons)</figcaption>\n</figure>\n:::\n\n:::\n\n## A quick note on type systems \n\n::: {.column style=\"width:65%; font-size:18pt\"}\nProgramming languages have different philosophies. They are often referred as being “strong” or “weak” and “static” or “dynamic”.\n\n### Types of type checking\n\nStatically-typed languages (C++, Rust)\n\n- The programmer has to specify the data type for a variable or object in the code itself and they are checked at compile time\n- Benefits: safety (catches errors early), possibly more performant\n- Downsides: more tedious and less flexible\n\nStrongly but dynamically-typed languages (e.g. Python)\n\n- Python features *dynamic typing*. There is no need to explicitly declare variables as being a specific data type, and it does allow limited implicit conversions, but not as extensively - as e.g. JavaScript.\n\nWeakly-typed languages (e.g. Javascript)\n\n- Allows extensive type *coercion*; mixing-and-matching of datatypes freely e.g. 5+”2”=“52”\n\n\n:::\n\n::: {.column width=\"35%\"}\n<figure style=\"display: flex; flex-direction: column; align-items: center; margin: 0;\">\n  <img src=\"images/data-types-2a.jpg\" />\n  <figcaption style=\"margin-top: 0.1em; line-height: 1.2;\">https://remotescout24.com/en/blog/806-typed-vs-untyped-programming-languages</figcaption>\n</figure>\n\n<figure style=\"display: flex; flex-direction: column; align-items: center; margin: 0;\">\n  <img src=\"images/data-types-2b.png\" />\n  <figcaption style=\"margin-top: 0.1em; line-height: 1.2;\">C++. This code generates a type error; we tried to assign a string value to an int</figcaption>\n</figure>\n\n<figure style=\"display: flex; flex-direction: column; align-items: center; margin: 0;\">\n  <img src=\"images/data-types-2c.png\" />\n  <figcaption style=\"margin-top: 0.1em; line-height: 1.2;\">JavaScript. This is valid JS code and ends with z being a string with the content “52”</figcaption>\n</figure>\n\n:::\n\n# Data types in Python\n\n\n## Booleans \n\n::: {.column style=\"width:65%; font-size:20pt\"}\n\nLike most programming languages, python has a `bool` datatype. In some ways, this is the simplest type available. A Boolean can only be `True` or `False`, and is returned when evaluating an expression. For example:\n\n::: {#db4afbbe .cell execution_count=1}\n``` {.python .cell-code}\nour_result = 10>9\nprint(our_result)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTrue\n```\n:::\n:::\n\n\nReturns `True` - we're asking Python for the result of the comparison `10>9`, and to store this result in a variable called `our_result`. The data type of a true-false comparison result like that is `bool`, so our variable will also be of this type. \n\nBooleans will become highly relevant when we talk about conditionals and program flow.\n\n:::\n\n::: {.column width=\"35%\"}\n<figure style=\"display: flex; flex-direction: column; align-items: center; margin: 0;\">\n  <img src=\"images/data-types-3a.png\" />\n  <figcaption style=\"margin-top: 0.1em; line-height: 1.2;\">George Boole (1815-1864) - the originator of Boolean logic</figcaption>\n</figure>\n:::\n\n## Numeric types {style=\"font-size:20pt\"}\n\nNumeric types are for variables that will only contain numbers. Other programming languages often have many different numeric types, but Python (mercifully) only has two:\n\n`int` can contain any^[there is no clearly-defined maximum number for an integer in python; certainly not one you're likely to ever encounter] *whole* (no fraction or decimals) number; negative, positive or zero.\n- e.g. -4, 0, 2, 9087358292578\n\n`float` can contain any number with a decimal point, to arbitrary^[again, limits exist but aren't relevant here] precision.\n- e.g. -2.2, 0.0, 2.0, 2452.259259999999999\n\nIf you're manually assigning a number to a variable, python will always choose an `int` or `float` depending on whether you've used a decimal point or not - so `2` and `2.0` are *not* equivalent in this context.\n\n## Data structures {style=\"font-size:20pt\"}\n\nWith data structures, we can address an element or elements by using square bracket notation - more on this below.\n\n### Strings (str)\n\nAn ordered sequence (string) of letters^[or numbers, symbols, etc. - any valid UTF-8 symbols]. Enclosed by quotation marks. E.g.\n\n`our_string = \"Hello world\"`\n\n### Lists (list)\n\nAn ordered sequence of objects, where each object can be another data type (int, float, string, bool, etc). Enclosed by square brackets, and the items separated by commas. E.g.\n\n```\nour_list = [1, 2.3, \"abc\"]\n```\n\n### Dictionaries (dict)\n\nDictionaries are key-value pairs, where each entry is a pair of entries. Enclosed by curly braces, the keys and values separated by a colon and each pair separated by a comma. E.g.\n\n`our_dict = {\"org_code\":\"0DF\",\"name\":\"SCW CSU\",\"year\": 2013}`\n\n## Other data types\n\n- You may have heard of other data types such as *arrays* (which are kind like *lists* but two-dimensional).\n- Arrays are not a built-in Python type but are offered by the `numpy` package.\n- `pandas` also offers additional data types such as `timestamp` (similar to SQL's `datetime`).\n- `dataframes` (from `pandas`) are an example of a higher-order class that makes use of datatypes within it; remember from previous sessions that a `dataframe` can contain strings, integers, timestamps etc.\n\n# Assigning and manipulating data types\n\n## Assigning a type to a variable {.r-fit-text style=\"font-size:24pt\"}\n\n\n## Conversion (casting)\n\n# Thank you!\n\n## Further reading\n\n- https://www.w3schools.com/python/python_booleans.asp \n- https://www.w3schools.com/python/python_numbers.asp \n\n",
    "supporting": [
      "slides_files"
    ],
    "filters": [],
    "includes": {}
  }
}