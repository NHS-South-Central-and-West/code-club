{
  "hash": "d6f9bcb177604b1e6d6382a34dc4e052",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Visualisation with Seaborn\"\nformat:\n  html: default\n  ipynb: default\n---\n\nPython has a rich ecosystem of libraries for data visualisation, each with different strengths. Some popular options include matplotlib for fine control over plots, plotly for interactive visualisations, and bokeh for web-ready dashboards. In this session, we’ll be using seaborn. It's built on top of matplotlib but offers a simpler, high-level interface and nice looking default styles — it's therefore a good choice when you who want to quickly create clear and informative plots without needing to tweak every detail.\n\n![Python (and R) visualisation libraries.](../../images/python_visual_libraries.png)\n\nWe are using [Australian weather data](https://www.kaggle.com/datasets/jsphyg/weather-dataset-rattle-package), taken from [Kaggle](https://kaggle.com). This dataset is used to build machine learning models that predict whether it will rain tomorrow, using data about the weather every day from 2007 to 2017. To download the data, click [here](data/weatherAUS.csv).\n\nOne final note before we get started - This page is a combination of text and python code. We've tried to explain clearly what we're about to do before we do it, but do also note the `# comments` within the python code cells themselves that occasionally explain a specific line of code in more detail.\n\n## Initial setup\n\nWe're going to import some python packages. Remember that the `plt`, `np`, `sns` aliases are just for convenience - we could omit this completely or use different aliases if we prefer.\n\n::: {.callout-note}\n### Aside - why `sns`?\nSeaborn being imported as `sns` is an odd convention (they are the initials of the fictional character the package was named for) that will make it easier to read or copy/paste online examples.\n:::\n\n::: {#setup .cell execution_count=1}\n``` {.python .cell-code}\n# install necessary packages\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\n# suppress some annoying warnings\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning) \n\nsns.set_theme(style='darkgrid') # https://seaborn.pydata.org/generated/seaborn.set_theme.html\nsns.set_context(\"notebook\") # set an overall scale. Notebook is the default. In increasing size: paper, notebook, talk, poster.\nplt.rcParams['font.sans-serif'] = ['Calibri','Segoe UI','Arial'] # use a nicer font in matplotlib (if available)\n```\n:::\n\n\nAs before, we need to import our dataset. We're importing the `csv` file into an initial dataframe called `df` to start with.\n\n::: {#import-data .cell execution_count=2}\n``` {.python .cell-code}\n# import the dataset\ndf = pd.read_csv('data/weatherAUS.csv')\n```\n:::\n\n\n## Data manipulation\n\n### Column conversions\n\nBefore we start actually generating some visuals, we need to make sure our Date column contains proper datetimes. We're also going to drop the years with partial data so that our dataset only has full years. Finally we're going to change the RainTomorrow field to contain a 0 or a 1 rather than yes/no.\n\n::: {#cabc7628 .cell execution_count=3}\n``` {.python .cell-code}\n# convert date column to datetime\ndf['Date'] = pd.to_datetime(df['Date'])\n\n# create a column that just contains the year\ndf['Year'] = df['Date'].dt.year\n\n# drop the partial years (2007,2017)\ndf = df[~df['Year'].isin([2007,2017])]\n\n# convert 'RainTomorrow' to a numeric variable, where 'Yes' = 1 and 'No' = 0.\ndf['RainToday']=df['RainToday'].replace({'Yes': 1, 'No': 0, 'NA':0}).fillna(0).astype(int)\ndf['RainTomorrow']=df['RainTomorrow'].map({'Yes': 1, 'No': 0,'NA': 0}).fillna(0).astype(int); \n\n# little tip: the semicolon suppresses textual output when we don't want it\n```\n:::\n\n\n### Sort order and other helper tables\n\nWe need a month order for our \"mmm\" months - there is probably an official way of doing this...\n\n::: {#8a00c3cb .cell execution_count=4}\n``` {.python .cell-code}\nmonth_order = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n```\n:::\n\n\nWe also need a sort order for our city names to use as a column order for some of our charts later. We'll just arrange them alphabetically.\n\n::: {#79dbb68e .cell execution_count=5}\n``` {.python .cell-code}\ncolOrder_top5Cities=['Adelaide','Brisbane','Melbourne','Perth','Sydney']\n```\n:::\n\n\nTo enhance a chart we're going to build later, we're going to dynamically calculate some text describing our data range.\n\n::: {#1ad79db7 .cell execution_count=6}\n``` {.python .cell-code}\n# Calculate the date range dynamically; we're going to use this later...\ndate_min = df['Date'].min().strftime('%Y')\ndate_max = df['Date'].max().strftime('%Y')\ndate_range = f\"{date_min} - {date_max}\"\n\nprint(date_range)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2008 - 2016\n```\n:::\n:::\n\n\n### Pivoting and grouping\n\nNext, we're going to create some helper dataframes by filtering, grouping and pivoting the data. These will be used for different types of visuals later. Of course, we could have just created these groupings and pivots inline when we do the actual visualisation, but we're doing it this way because:\n\n1. It's easier to follow\n2. It's tidier (and probably faster) to create these dataframes once as we're going to be using them multiple times.\n\n::: {#1ed71b03 .cell execution_count=7}\n``` {.python .cell-code}\n# build a month column\ndf['Month'] = df['Date'].dt.strftime('%b') # Add a column that just contains the month in mmm format\ndf['Month'] = pd.Categorical(df['Month'], categories=month_order, ordered=True) # Make it categorical using our custom order so that it appears in the right order\n\n# we're going to filter to top 5 cities from now on\ndf_top5Cities = df[df['Location'].isin(['Perth','Adelaide','Sydney','Melbourne','Brisbane'])]\n\n# a dataframe with the number of rainy days per year and month, and location\ndf_top5Cities_rainyDays = df_top5Cities.groupby(['Location','Year', 'Month'])['RainToday'].sum().reset_index()\n\n# finally, we're going to create some grouped and pivoted dataframes. Picture these as PivotTables in Excel.\ndf_top5Cities_Rainfall_grouped = df_top5Cities.groupby(['Location', 'Month'])['Rainfall'].mean().reset_index()\ndf_top5Cities_Rainfall_pivoted = df_top5Cities_Rainfall_grouped.pivot(index=\"Location\",columns=\"Month\", values=\"Rainfall\")\ndf_top5Cities_monthly_rainyDays_pivoted = df_top5Cities.groupby(['Location', 'Month','Year'])['RainToday'].sum().reset_index().groupby(['Location','Month'])['RainToday'].mean().reset_index().pivot(index=\"Location\",columns=\"Month\", values=\"RainToday\")\n```\n:::\n\n\nLet's use `head()` to make sure we understand what each grouped/pivoted DF is for.\n\n::: {#7e2fde94 .cell execution_count=8}\n``` {.python .cell-code}\ndf_top5Cities_Rainfall_grouped.head(2)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Location</th>\n      <th>Month</th>\n      <th>Rainfall</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Adelaide</td>\n      <td>Jan</td>\n      <td>0.672199</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Adelaide</td>\n      <td>Feb</td>\n      <td>0.973604</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#ff6fd776 .cell execution_count=9}\n``` {.python .cell-code}\ndf_top5Cities_Rainfall_pivoted.head(2)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>Month</th>\n      <th>Jan</th>\n      <th>Feb</th>\n      <th>Mar</th>\n      <th>Apr</th>\n      <th>May</th>\n      <th>Jun</th>\n      <th>Jul</th>\n      <th>Aug</th>\n      <th>Sep</th>\n      <th>Oct</th>\n      <th>Nov</th>\n      <th>Dec</th>\n    </tr>\n    <tr>\n      <th>Location</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Adelaide</th>\n      <td>0.672199</td>\n      <td>0.973604</td>\n      <td>1.171667</td>\n      <td>1.461165</td>\n      <td>2.293860</td>\n      <td>2.447009</td>\n      <td>2.873606</td>\n      <td>2.399237</td>\n      <td>1.809125</td>\n      <td>0.906273</td>\n      <td>0.730827</td>\n      <td>1.192500</td>\n    </tr>\n    <tr>\n      <th>Brisbane</th>\n      <td>6.415574</td>\n      <td>5.325389</td>\n      <td>4.442276</td>\n      <td>3.165385</td>\n      <td>3.126446</td>\n      <td>2.516318</td>\n      <td>1.000000</td>\n      <td>1.273381</td>\n      <td>1.314498</td>\n      <td>2.419424</td>\n      <td>3.347761</td>\n      <td>4.551613</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#39a975b0 .cell execution_count=10}\n``` {.python .cell-code}\ndf_top5Cities_monthly_rainyDays_pivoted.head(2)\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>Month</th>\n      <th>Jan</th>\n      <th>Feb</th>\n      <th>Mar</th>\n      <th>Apr</th>\n      <th>May</th>\n      <th>Jun</th>\n      <th>Jul</th>\n      <th>Aug</th>\n      <th>Sep</th>\n      <th>Oct</th>\n      <th>Nov</th>\n      <th>Dec</th>\n    </tr>\n    <tr>\n      <th>Location</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Adelaide</th>\n      <td>2.555556</td>\n      <td>1.555556</td>\n      <td>3.666667</td>\n      <td>4.000000</td>\n      <td>7.666667</td>\n      <td>8.555556</td>\n      <td>13.444444</td>\n      <td>11.444444</td>\n      <td>7.888889</td>\n      <td>4.222222</td>\n      <td>4.000000</td>\n      <td>4.555556</td>\n    </tr>\n    <tr>\n      <th>Brisbane</th>\n      <td>8.000000</td>\n      <td>7.111111</td>\n      <td>10.000000</td>\n      <td>5.333333</td>\n      <td>5.555556</td>\n      <td>6.222222</td>\n      <td>4.111111</td>\n      <td>3.555556</td>\n      <td>4.111111</td>\n      <td>5.888889</td>\n      <td>6.888889</td>\n      <td>8.777778</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.callout-note}\n#### Aside: why `df[df[...`?\n\n```python\ndf_top5Cities = df[df['Location'].isin(['Perth','Adelaide','Sydney','Melbourne','Brisbane'])]\n```\n\n- The first (outer) `df[` tells pandas that we want to select a subset of rows based on some condition.\n- The second (inner) `df[` is going to tell pandas this condition. In this case, we're using `isin` to return a dataframe that contains a series of `True` and `False` rows corresponding to whether the rows in our original dataframe had the `Location` column as one of our 5 cities.\n- The final dataframe is then a filtered copy where the inner condition is `True`.\n\nYes, there are other ways of doing this! For example by using `.query()` to specify our conditions.\n:::\n\n## Doing some actual plotting\n\nThe Seaborn home page has a very good [introductory tutorial](https://seaborn.pydata.org/tutorial/introduction.html), [reference documentation](https://seaborn.pydata.org/api.html), and a [nice collection of examples](https://seaborn.pydata.org/examples/index.html). You should familiarise yourself with the documentation; it'll pay off massively if you actually grasp what each function and argument is for, rather than just copy/pasting examples and tweaking them until they work (without really understanding what they're doing).\n\n### A basic one-line line chart\n\n::: {#ee2db8ac .cell execution_count=11}\n``` {.python .cell-code}\nsns.lineplot(\n  data=df_top5Cities_Rainfall_pivoted.T #.T gives the transpose (flips rows and columns)\n  ) \n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-ipynb/cell-12-output-1.png){}\n:::\n:::\n\n\n### Just a little bit of customisation - a bar chart\n\n[https://seaborn.pydata.org/generated/seaborn.barplot.html](https://seaborn.pydata.org/generated/seaborn.barplot.html)\n\n::: {#7be261dc .cell execution_count=12}\n``` {.python .cell-code}\nour_barplot = sns.barplot(\n  data=df_top5Cities_Rainfall_grouped \n  ,x=\"Month\"\n  ,y=\"Rainfall\"\n  ,hue=\"Location\" # read \"hue\" as \"series\"\n  ,palette=\"tab10\" # https://matplotlib.org/stable/users/explain/colors/colormaps.html\n  )\n\nour_barplot.set(title='Average daily rainfall by month and city',ylim=(0,8))\n\nsns.move_legend(our_barplot,\"upper left\", title=None, ncol=4) # https://seaborn.pydata.org/generated/seaborn.move_legend.html\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-ipynb/cell-13-output-1.png){}\n:::\n:::\n\n\n::: {.callout-note}\n#### Aside - why did we need to set the title *after* the `sns.barplot` call?\n\nThe `barplot` function provided by Seaborn doesn't actually allow setting of a title - it just generates a plot (including its axes) and returns this as a matplotlib `Axes` object (recall we mentioned earlier that Seaborn is a layer on top of the matplotlib library). By using the `.set(...)` method on our barplot object, we can *modify* this returned object to give it a title. We also could have used this to customise our axis labels (the defaults are fine here), set axis limits, or things like tick labels.\n:::\n\n### Heatmaps\n\nThe Seaborn `heatmap` function will easily let us create a two-dimensional heatmap visual with a specific colour theme and custom number formatting.\n\n::: {#1c09c85f .cell execution_count=13}\n``` {.python .cell-code}\n# We need to use some matplotlib code to set our output size, add a title, and capitalise our x-axis label\nf,ax = plt.subplots(figsize=(10, 5)) # matplotlib subplots are a common way of setting a figure layout\nax.set_title(f\"Average daily rainfall (/mm) each month ({date_range}) for Australia's top 5 cities\", fontsize=16, fontweight=\"bold\", pad=10) # using our previously set date_range variable\n\nsns.heatmap(df_top5Cities_Rainfall_pivoted # Heatmap expects rectangular (pivot-like) data\n            ,annot=True # Put numbers inside the cells\n            ,fmt=\".1f\" # Make the numbers have 1 decimal place\n            ,square=True # Square vs rectangular cells\n            ,cbar=False # Get rid of the colourbar legend on the side\n            ,cmap=\"Blues\" # Seems appropriate for rainfall. Colourmaps reference: https://matplotlib.org/stable/users/explain/colors/colormaps.html \n            ,ax=ax # Tell it to use the matplotlib axes we created earlier\n           )\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-ipynb/cell-14-output-1.png){}\n:::\n:::\n\n\n### Another heatmap with some further tweaks\n\nWe can make our heatmap look just a little better by apply some tweaks to the subplots object.\n\n::: {#3aec4045 .cell execution_count=14}\n``` {.python .cell-code}\n# Again setting up matplotlib subplots so that we can make some changes later\nf,ax = plt.subplots(figsize=(10, 5)) \n\nsns.heatmap(df_top5Cities_monthly_rainyDays_pivoted # Heatmap expects rectangular (pivot-like) data\n            ,annot=True # Put numbers inside the cells\n            ,fmt=\".0f\" # Force the number format\n            ,square=True # Square vs rectangular cells\n            ,cbar=False # Get rid of the colourbar legend on the side\n            ,cmap=\"crest\" # Colourmaps reference: https://matplotlib.org/stable/users/explain/colors/colormaps.html \n            ,ax=ax # Tell it to use the matplotlib axes we created earlier\n           )\n\n# We need to use some matplotlib code to set our output size, add a title, and capitalise our x-axis label\nax.tick_params(axis='x', labelsize=11, rotation=45) # I think 45-degree month labels look nicer, but this is a matter of taste.\nax.tick_params(axis='y', labelsize=11)\n\n# Manually changing our axis labels for more control\nax.set_xlabel(\"Month\",fontweight=\"bold\",fontsize=12) \nax.set_ylabel(\"City\",fontweight=\"bold\",fontsize=12)\n\n# Set our title dynamically\nax.set_title(f\"Mean number of rainy days by month between {date_min} and {date_max} for Australia's top 5 cities\", fontsize=16, fontweight=\"bold\", pad=15);\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-ipynb/cell-15-output-1.png){}\n:::\n:::\n\n\n### A fancy multi-chart visual\n\nThis chart uses the `boxgrid` object to arrange multiple different subcharts. We're actually generating two sets of different visuals (`linegrid` and `boxgrid`) in one output. If you're not sure what the `for [...] in [...]` syntax means, don't worry - this will be covered in a future session.\n\n::: {#3e4c4051 .cell execution_count=15}\n``` {.python .cell-code}\n# Setting up the grid of box plots\n# Box plots are a bit of a rabbit hole and are extremely customisable; we're mostly using defaults here\nboxgrid = sns.FacetGrid(df_top5Cities \n                        ,col=\"Location\" # Defining the different facets\n                        ,col_wrap=5, height=4.5 # Layout and sizing for our facet grid\n                        ,col_order=colOrder_top5Cities  # Using our alphabetical order of city names to arrange our facets\n)\nboxgrid.map(sns.boxplot # This is what tells sns what sort of plots we want in our grid\n            ,\"Month\" # X\n            ,\"MaxTemp\" # Y\n            ,linewidth=1.5\n            ,color=\"skyblue\"\n            ,order=month_order\n            ,fliersize=0 # Seaborn boxplots by default include markers for outliers, which it calls \"fliers\". For this chart we'd like to disable these.\n            ) \n\n# Setting up the grid of line plots\n# Using the default matplotlib plot here\nlinegrid = sns.FacetGrid(df_top5Cities.groupby(['Location', 'Month'])['Rainfall'].mean().reset_index()\n                         ,col=\"Location\" \n                         ,hue=\"Location\",palette=\"Set2\" \n                         ,col_wrap=5, height=4.5 \n                         ,col_order=colOrder_top5Cities\n)\nlinegrid.map(plt.plot, \"Month\", \"Rainfall\",marker=\"o\")\n\n# Formatting axes\nfor ax in boxgrid.axes.flat:\n    ax.tick_params(axis='x', labelsize=9, rotation=45)\n    ax.tick_params(axis='y', labelsize=9)\nfor ax in linegrid.axes.flat:\n    ax.tick_params(axis='x', labelsize=9, rotation=45)\n    ax.tick_params(axis='y', labelsize=9)\n\nlinegrid.set_titles(col_template=\"{col_name}\",fontweight=\"bold\",fontsize=16)\nlinegrid.set_axis_labels(\"Month\",\"Average rainfall /mm\",fontweight=\"bold\",fontsize=10)\nboxgrid.set_titles(col_template=\"{col_name}\",fontweight=\"bold\",fontsize=16)\nboxgrid.set_axis_labels(\"Month\",\"Max temp /$\\\\degree$C\",fontweight=\"bold\",fontsize=10)\n\n# Setting overall titles and spacing\nlinegrid.fig.suptitle(f\"Mean daily rainfall by month for top 5 cities, {date_range}\", fontsize=16, color='black',fontweight='bold') \nboxgrid.fig.suptitle(f\"Max temperature by month for top 5 cities, {date_range}\", fontsize=16, color='black',fontweight='bold') \nlinegrid.fig.subplots_adjust(top=0.85)  \nboxgrid.fig.subplots_adjust(top=0.85);\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-ipynb/cell-16-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-ipynb/cell-16-output-2.png){}\n:::\n:::\n\n\n### \"Small multiples\"-type time-series grid\n\nThis is mostly based on the example given at [https://seaborn.pydata.org/examples/timeseries_facets.html](https://seaborn.pydata.org/examples/timeseries_facets.html). \n\nFirstly, for this one we need another dataframe that just contains the Sydney data.\n\n::: {#d9c69069 .cell execution_count=16}\n``` {.python .cell-code}\ndf_Sydney = df[df['Location']==\"Sydney\"].groupby(['Month', 'Location','Year'], as_index=False)['MaxTemp'].max()\n```\n:::\n\n\nWe're going to use the `relplot` function to create a grid of plots with a specific set of variables across its rows and columns. For each cell we're plotting that year's data with a different colour, and plotting all the other years in grey in the background.\n\n::: {#2b7b9d7b .cell execution_count=17}\n``` {.python .cell-code}\n# plot each year's time series in its own facet\ng = sns.relplot(data=df_Sydney\n                ,x=\"Month\"\n                ,y=\"MaxTemp\"\n                ,col=\"Year\"\n                ,hue=\"Year\"\n                ,kind=\"line\"\n                ,palette=\"viridis\"\n                ,linewidth=4\n                ,zorder=5\n                ,col_wrap=3, height=2, aspect=1.5, legend=False,\n)\n\n# iterate over each subplot to customize further\nfor year, ax in g.axes_dict.items():\n\n    # Add the title as an annotation within the plot\n    ax.text(.8\n            ,.85\n            ,year\n            ,transform=ax.transAxes\n            ,fontweight=\"bold\",fontsize=9)\n\n    # Plot every year's time series in the background\n    sns.lineplot(\n        data=df_Sydney, x=\"Month\", y=\"MaxTemp\", units=\"Year\",\n        estimator=None, color=\".7\", linewidth=1, ax=ax\n    )\n\n# reduce the frequency of the x axis ticks\nax.set_xticks(ax.get_xticks()[::2])\n\n# tweak the supporting aspects of the plot\ng.set_titles(\"\")\ng.fig.suptitle(f\"Max temperature by month in Sydney, {date_range}\", fontsize=16, color='black',fontweight='bold') \ng.set_axis_labels(\"\", \"Max Temp /$\\\\degree \\\\mathrm{C}$\");\ng.tight_layout();\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-ipynb/cell-18-output-1.png){}\n:::\n:::\n\n\n---\njupyter:\n  kernelspec:\n    display_name: Python 3 (ipykernel)\n    language: python\n    name: python3\n    path: c:\\Users\\paul.johnson\\git\\code-club\\.venv\\share\\jupyter\\kernels\\python3\n  language_info:\n    codemirror_mode:\n      name: ipython\n      version: 3\n    file_extension: .py\n    mimetype: text/x-python\n    name: python\n    nbconvert_exporter: python\n    pygments_lexer: ipython3\n    version: 3.12.5\n---\n",
    "supporting": [
      "index_files\\figure-ipynb"
    ],
    "filters": []
  }
}