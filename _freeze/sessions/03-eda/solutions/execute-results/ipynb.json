{
  "hash": "7deb75344331d77d27b2e9a8e890c109",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"EDA Exercise Solutions\"\nformat:\n  html: default\n  ipynb: default\n---\n\n::: {#52293520 .cell execution_count=1}\n``` {.python .cell-code}\n# import packages\nimport numpy as np\nimport pandas as pd\n```\n:::\n\n\n::: {#7da11efd .cell execution_count=2}\n``` {.python .cell-code}\n# import the dataset\ndf = pd.read_csv('data/weatherAUS.csv')\n```\n:::\n\n\n1. What is the 'Sunshine' column's data type?\n\n::: {#374be013 .cell execution_count=3}\n``` {.python .cell-code}\n# What is the 'Sunshine' column's data type?\ndf['Sunshine'].dtypes\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\ndtype('float64')\n```\n:::\n:::\n\n\n2. Identify all the columns that are of dtype 'object'.\n\n::: {#0a1baee2 .cell execution_count=4}\n``` {.python .cell-code}\n# Identify all the columns that are of dtype 'object'\nlist(df.select_dtypes(include=['object']))\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n['Date',\n 'Location',\n 'WindGustDir',\n 'WindDir9am',\n 'WindDir3pm',\n 'RainToday',\n 'RainTomorrow']\n```\n:::\n:::\n\n\n3. How many of the dataframe's columns are of dtype 'object'?\n\n::: {#10fbcbb9 .cell execution_count=5}\n``` {.python .cell-code}\n# How many of the dataframe's columns are of dtype 'object'?\nlen(list(df.select_dtypes(include=['object'])))\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n7\n```\n:::\n:::\n\n\n4. How many of the 'Rainfall' column values are NAs?\n\n::: {#5fee1825 .cell execution_count=6}\n``` {.python .cell-code}\n# How many of the 'Rainfall' column values are NAs?\ndf['Rainfall'].isna().sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\nnp.int64(3261)\n```\n:::\n:::\n\n\n5. Create a new dataframe which only includes the 'Date', 'Location, 'Sunshine', 'Rainfall', and 'RainTomorrow' columns.\n\n::: {#2d84fa19 .cell execution_count=7}\n``` {.python .cell-code}\n# Create a new dataframe which only includes the 'Date', 'Location, 'Sunshine', 'Rainfall', and 'RainTomorrow' columns.\nnew_df = df[['Date', 'Location', 'Sunshine', 'Rainfall', 'RainTomorrow']]\nnew_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Date</th>\n      <th>Location</th>\n      <th>Sunshine</th>\n      <th>Rainfall</th>\n      <th>RainTomorrow</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2008-12-01</td>\n      <td>Albury</td>\n      <td>NaN</td>\n      <td>0.6</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2008-12-02</td>\n      <td>Albury</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2008-12-03</td>\n      <td>Albury</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2008-12-04</td>\n      <td>Albury</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>No</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2008-12-05</td>\n      <td>Albury</td>\n      <td>NaN</td>\n      <td>1.0</td>\n      <td>No</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n6. Convert 'RainTomorrow' to a numeric variable, where 'Yes' = 1 and 'No' = 0.\n\n::: {#1f49dd38 .cell execution_count=8}\n``` {.python .cell-code}\n# Convert 'RainTomorrow' to a numeric variable, where 'Yes' = 1 and 'No' = 0.\n# df['Location'].astype('category').cat.codes\n# df['RainTomorrow'].astype('category').cat.codes\ndf['RainTomorrow'].map({'Yes': 1, 'No': 0})\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n0         0.0\n1         0.0\n2         0.0\n3         0.0\n4         0.0\n         ... \n145455    0.0\n145456    0.0\n145457    0.0\n145458    0.0\n145459    NaN\nName: RainTomorrow, Length: 145460, dtype: float64\n```\n:::\n:::\n\n\n7. What is the average amount of rainfall for each location?\n\n::: {#316898dc .cell execution_count=9}\n``` {.python .cell-code}\n# What is the average amount of rainfall for each location?\ndf.groupby('Location')['Rainfall'].mean().sort_values(ascending=False)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\nLocation\nCairns              5.742035\nDarwin              5.092452\nCoffsHarbour        5.061497\nGoldCoast           3.769396\nWollongong          3.594903\nWilliamtown         3.591108\nTownsville          3.485592\nNorahHead           3.387299\nSydney              3.324543\nMountGinini         3.292260\nKatherine           3.201090\nNewcastle           3.183892\nBrisbane            3.144891\nNorfolkIsland       3.127665\nSydneyAirport       3.009917\nWalpole             2.906846\nWitchcliffe         2.895664\nPortland            2.530374\nAlbany              2.263859\nBadgerysCreek       2.193101\nPenrith             2.175304\nTuggeranong         2.164043\nDartmoor            2.146567\nRichmond            2.138462\nMountGambier        2.087562\nLaunceston          2.011988\nAlbury              1.914115\nPerth               1.906295\nMelbourne           1.870062\nWatsonia            1.860820\nPerthAirport        1.761648\nCanberra            1.741720\nBallarat            1.740026\nWaggaWagga          1.709946\nPearceRAAF          1.669080\nMoree               1.630203\nBendigo             1.619380\nHobart              1.601819\nAdelaide            1.566354\nSale                1.510167\nMelbourneAirport    1.451977\nNuriootpa           1.390343\nCobar               1.127309\nSalmonGums          1.034382\nMildura             0.945062\nNhil                0.934863\nAliceSprings        0.882850\nUluru               0.784363\nWoomera             0.490405\nName: Rainfall, dtype: float64\n```\n:::\n:::\n\n\n8. What is the average amount of rainfall for days that it will rain tomorrow?\n\n::: {#35a38c4d .cell execution_count=10}\n``` {.python .cell-code}\n# What is the average amount of rainfall for days that it will rain tomorrow?\ndf.groupby('RainTomorrow')['Rainfall'].mean()\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\nRainTomorrow\nNo     1.270290\nYes    6.142104\nName: Rainfall, dtype: float64\n```\n:::\n:::\n\n\n9. What is the average amount of sunshine in Perth when it will not rain tomorrow?\n\n::: {#d7f85234 .cell execution_count=11}\n``` {.python .cell-code}\n# What is the average amount of sunshine in Perth when it will not rain tomorrow?\ndf.loc[(df['Location'] == 'Perth') & (df['RainTomorrow'] == 'No'), 'Sunshine'].mean()\n# df[(df['Location']=='Perth') & (df['RainTomorrow']=='No')]['Sunshine'].mean()\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\nnp.float64(9.705306603773584)\n```\n:::\n:::\n\n\n10. We want to understand the role that time plays in the dataset. Using the original dataframe, carry the following tasks and answer the corresponding questions:\n    - Create columns representing the year and month from the 'Date' column. How many years of data are in the dataset?\n    - Examine the distribution of the 'Sunshine' NAs over time. Is time a component in the 'Sunshine' data quality issues?\n    - Calculate the average rainfall and sunshine by month. How do rainfall and sunshine vary through the year?\n    - Calculate the average rainfall and sunshine by year. How have rainfall and sunshine changed over time?\n\n::: {#69ee9d15 .cell execution_count=12}\n``` {.python .cell-code}\n# Create columns representing the year and month from the 'Date' column. How many years of data are in the dataset?\ndf = (\n    df.assign(Date=pd.to_datetime(df['Date']))\n    .assign(\n        Year=lambda x: x['Date'].dt.year,\n        Month=lambda x: x['Date'].dt.month\n    )\n)\n\ndf['Year'].nunique()\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n11\n```\n:::\n:::\n\n\n::: {#3c3b6fc1 .cell execution_count=13}\n``` {.python .cell-code}\n# Examine the distribution of the 'Sunshine' NAs over time. Is time a component in the 'Sunshine' data quality issues?\ndf.groupby('Year')['Sunshine'].apply(lambda x: x.isna().sum())\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\nYear\n2007        0\n2008      323\n2009     6146\n2010     6220\n2011     6053\n2012     6539\n2013     7570\n2014     9157\n2015     9441\n2016    11994\n2017     6392\nName: Sunshine, dtype: int64\n```\n:::\n:::\n\n\n::: {#61edc112 .cell execution_count=14}\n``` {.python .cell-code}\n# Calculate the average rainfall and sunshine by month. How do rainfall and sunshine vary through the year?\ndf.groupby('Month')[['Rainfall', 'Sunshine']].mean()\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Rainfall</th>\n      <th>Sunshine</th>\n    </tr>\n    <tr>\n      <th>Month</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>2.738478</td>\n      <td>9.203301</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3.188665</td>\n      <td>8.590477</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2.814450</td>\n      <td>7.627229</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2.334823</td>\n      <td>7.080942</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2.001654</td>\n      <td>6.321179</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>2.782182</td>\n      <td>5.645576</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>2.184209</td>\n      <td>6.052353</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>2.034983</td>\n      <td>7.136923</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>1.888543</td>\n      <td>7.685301</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>1.614732</td>\n      <td>8.490807</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>2.268177</td>\n      <td>8.666098</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>2.491835</td>\n      <td>8.997794</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#fd2d1a9c .cell execution_count=15}\n``` {.python .cell-code}\n# Calculate the average rainfall and sunshine by year. How have rainfall and sunshine changed over time?\ndf.groupby('Year')[['Rainfall', 'Sunshine']].mean()\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Rainfall</th>\n      <th>Sunshine</th>\n    </tr>\n    <tr>\n      <th>Year</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2007</th>\n      <td>3.219672</td>\n      <td>8.086885</td>\n    </tr>\n    <tr>\n      <th>2008</th>\n      <td>2.293541</td>\n      <td>7.789111</td>\n    </tr>\n    <tr>\n      <th>2009</th>\n      <td>2.166385</td>\n      <td>7.905102</td>\n    </tr>\n    <tr>\n      <th>2010</th>\n      <td>2.710924</td>\n      <td>7.277599</td>\n    </tr>\n    <tr>\n      <th>2011</th>\n      <td>2.829197</td>\n      <td>7.313705</td>\n    </tr>\n    <tr>\n      <th>2012</th>\n      <td>2.416200</td>\n      <td>7.580733</td>\n    </tr>\n    <tr>\n      <th>2013</th>\n      <td>2.272402</td>\n      <td>7.663279</td>\n    </tr>\n    <tr>\n      <th>2014</th>\n      <td>1.966341</td>\n      <td>7.793905</td>\n    </tr>\n    <tr>\n      <th>2015</th>\n      <td>2.160753</td>\n      <td>7.689140</td>\n    </tr>\n    <tr>\n      <th>2016</th>\n      <td>2.384054</td>\n      <td>7.646902</td>\n    </tr>\n    <tr>\n      <th>2017</th>\n      <td>2.478834</td>\n      <td>7.676602</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n---\njupyter:\n  kernelspec:\n    display_name: Python 3 (ipykernel)\n    language: python\n    name: python3\n    path: 'c:\\Users\\paul.johnson\\git\\code-club\\.venv\\share\\jupyter\\kernels\\python3'\n  language_info:\n    codemirror_mode:\n      name: ipython\n      version: 3\n    file_extension: .py\n    mimetype: text/x-python\n    name: python\n    nbconvert_exporter: python\n    pygments_lexer: ipython3\n    version: 3.12.5\n---\n",
    "supporting": [
      "solutions_files\\figure-ipynb"
    ],
    "filters": []
  }
}