{
  "hash": "7a6055e5dafc27537f775168ea60270b",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"An Introduction to Control Flow\"\nfooter: '**SAT //** Intro to Control Flow **//** August 2025'\nformat: revealjs\n---\n\n# What is Control Flow? {data-background-color=\"#425563\" data-verticator=\"#E8EDEE\"}\n\nOrdering & Controlling Statements in Code\n\n## Things That Flow {.center}\n\n::: {.column width=\"30%\" height=\"80%\"}\n<figure style=\"display: flex; flex-direction: column; align-items: center; margin: 0;\">\n  <img src=\"images/stream.jpg\"/>\n  <figcaption style=\"margin-top: 0.1em; line-height: 1.2;\">A stream flowing towards the sea.</figcaption>\n</figure>\n:::\n\n::: {.column width=\"30%\" height=\"80%\"}\n<figure style=\"display: flex; flex-direction: column; align-items: center; margin: 0;\">\n  <img src=\"images/traffic.png\"/>\n  <figcaption style=\"margin-top: 0.1em; line-height: 1.2;\">Trafic flow on a busy road.</figcaption>\n</figure>\n:::\n\n::: {.column width=\"30%\" height=\"80%\"}\n<figure style=\"display: flex; flex-direction: column; align-items: center; margin: 0;\">\n  <img src=\"images/conversation.jpg\"/>\n  <figcaption style=\"margin-top: 0.1em; line-height: 1.2;\">Conversation flowing between people.</figcaption>\n</figure>\n:::\n\n\n## Code Flows Too {.center}\n\n- The flow of code and the steps that impact that flow are called \"control flow\".\n- In general code flows in the way same as a book (with some exceptions).\n- Each function is completed before considering the next.\n- Functions can be nested in other functions - the inner most function is completed first.\n- Control structures can be used to change the course of a program.\n- Repetition structures can be used to repeat a section of code.\n\n# Control Flow Structure {data-background-color=\"#425563\" data-verticator=\"#E8EDEE\"}\n\nHow to Structure Control Flows in Python\n\n## Sequential Structure {.center}\n\n- In general code flows like a book reads:\n  - Statements (like lines of code) run top to bottom line,\n  - Left to right in statement,\n  - Each statement being completed before moving to the next.\n\n::: {#fa83d251 .cell output-location='default' execution_count=1}\n``` {.python .cell-code}\nv = \"2\"         #stores \"2\" as a string in 'v'\ni = int(v)      #stores v as an integer 'i'\nt = type(i)     #stores the type of 'i' as 't'\nprint(t)        #prints 't'\n```\n:::\n\n\n## Nesting Functions and Operations {.center}\n\n- We are not limited to a single function or operation per row.\n- The previous example could be re-written as:\n  - `print(type(int(\"2\")))`\n- Nesting functions can be useful, however care should be taken and it may be easier to separate functions over multiple rows.\n\n## Control Structures {.center}\n\n- Control structures (also known as decision structures) allow the flow to respond to varying situations.\n- A decision is made based on one or more conditions.\n- These control structures are very similar to the `IF` function in Excel and the `CASE` statement in SQL (but remember that indentation matters in Python).\n\n| Python - Control | SQL - CASE        | Excel - IF              |\n|:-----------------|:----------------- |:------------------------|\n| `if x = 2:`      | `CASE WHEN x > 2` | `IF(x > 2,`             |\n| `    y = 1`      | `    THEN 1`      | `1,`                    |\n| `else:`          | `ELSE`            |                         |\n| `    y = 0`      | `    0 END`       | `0)`                    |\n\n## The Importance of Being Boole(an) {.center}\n\n::: {.column width=\"35%\"}\n![](images/bool.png)\n:::\n\n::: {.column style=\"width: 60%\"}\n\n- George Boole was an English Mathmetician and logician whose work on binary logic has resulted in binary conditions bearing his name\n- Any statement that can be evaluated as only either `True` (1) or `False` (0) is Boolean.\n:::\n\n## Repetition Structures {.center}\n\n- Repetition structures (commonly referred to as \"loops\") allow for us to recycle chunks of code to perform the same or similar operation a specified number of times or until a condition changes.\n- **For** loops cycle through a series of iterations, until they reach the end performing each series of statements for each iteration.\n  - This can be used to cycle through a list, dictionary or other iterable as well as working through ranges of numbers\n- **While** loops continue until a predetermined condition changes from True to False.\n  - This can be useful for testing conditions but comes with a warning:\n- *Make sure your condition will change at some point or else your loop cannot end.*\n\n## What is Iterability? {.center}\n\n- Iterability is the ability to split an object into discrete items. The item may be ordered or unordered, each item will be extracted, processed ad set aside.\n- In general if an object can be split into multiple items it can be iterated (integers and floats are not iterable).\n\n- Iterable objects include:\n  - Strings (the word “strings” contains 7 iterable items).\n  - Lists eg [1, 2, 3, 4, 4, 4, 5, 6]\n  - Tuples eg (12, ‘Red’, ‘Apples’)\n  - Sets eg {1, 2, 3, 4, 5, 6}\n  - Dict eg {ICB_Code: ‘QSL’, Metric_Code: E.M.10}\n\n# Code Examples {data-background-color=\"#425563\" data-verticator=\"#E8EDEE\"}\n\nCode Flow Structures in Action\n\n## Sequential Structure Example {.center}\n\n- The following sequential code will create a variable called 'var' which is a string, it converts this string to an integer and conducts a series of mathematical operators before printing the result:\n\n::: {#5d181240 .cell output-location='default' execution_count=2}\n``` {.python .cell-code}\nvar = '22' # set \"var\" to '22'\nvar = int(var) # convert \"var\" to int\nvar = var  / 2 - 3 # apply math operators\nprint (var) # print result\n```\n:::\n\n\n## Control Structure Example {.center}\n\n- This code checks if a variable called 'provider' in this list is equal to a selection of values and prints out an associated string.\n\n::: {#9c68face .cell output-location='default' execution_count=3}\n``` {.python .cell-code}\nif provider == ‘ryr’:\n  print(‘SUSSEX’)\nelif provider == ‘rhu’:\n  print(‘HIOW’)\nelif provider == ‘rxq’:\n  print(‘BOB’)\nelse:\n  print(‘Unknown’)\n```\n:::\n\n\n## Control Structure Example {.center}\n\nFor comparison, this is the equivalent SQL CASE statement.\n\n```sql\nCASE\n  WHEN provider = 'ryr'\n    THEN 'Sussex'\n  WHEN provider = 'rhu'\n    THEN 'HIOW'\n  WHEN provider = 'rhu'\n    THEN 'BOB'\n  ELSE 'Unknown'\n  END\n```\n\n## Watch Out for Unintended Consequences {.center}\n\n::: {.column style=\"width:50%\"}\n- Not taking care over your coding can cause big issues. Consider the corner cases and unintended consequences?\n- Empty variables, incorrect data types, and misunderstood flow in the structure can affect your program.\n- Close the loop! Make sure you know how your loops are being switched off and that it’s possible.\n- A cautionary tale: [The Virtual Plague That Nearly Wiped Out The World of Warcraft](https://youtu.be/HFMv_hqinvc)\n\n:::\n\n::: {.column width=\"45%\"}\n![The \"Corrupted Blood\" Incident - a fairly famous coding error.](images/plague.jpg)\n:::\n\n\n## Final Thoughts {.center}\n\n- **Don't worry about memorising any of this!**\n- The aim of this session is to give a basic understanding of the logic needed to implement control flow in your program.\n\n## Further Reading {.center}\n\n::: {.column style=\"width:95%;\"}\n\n- [Python Tutorial - Control Flow](https://docs.python.org/3/tutorial/controlflow.html)\n- [Geeks for Geeks - Control Structures](https://www.geeksforgeeks.org/dsa/control-structures-in-programming-languages/)\n- [W3 Schools - if/elif/else Logic](https://www.w3schools.com/python/python_conditions.asp)\n- [List Comprehension in Python](https://realpython.com/list-comprehension-python/)\n:::\n\n# Thank You! {.center}\n\n<br>\nContact:\n<br>\n\n<ul >\n{{< fa solid envelope >}} [scwcsu.analytics.specialist@nhs.net](mailto:scwcsu.analytics.specialist@nhs.net)\n</ul>\n\n\nCode & Slides:\n<br>\n\n<ul >\n{{< fa brands github >}}[/NHS-South-Central-and-West/code-club](https://github.com/nhs-south-central-and-west/code-club)\n</ul>\n<br>\n\n... And don't forget to give us your [feedback](https://forms.office.com/e/g9fnSVPRwE).\n\n",
    "supporting": [
      "slides_files\\figure-revealjs"
    ],
    "filters": [],
    "includes": {}
  }
}