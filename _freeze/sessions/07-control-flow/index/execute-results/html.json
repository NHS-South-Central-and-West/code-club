{
  "hash": "26203afb2080e3d455d326d2dffb5b32",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"An Introduction to Control Flow\"\nformat:\n  html: default\n  ipynb: default\n---\n\nThis session is the second in a series of programming fundamentals. We recognise that this content might be a bit more dry and abstract, but it is important background to know when you start to actually use Python in your day to day work.\n\nMuch as the flow of a stream describes how it goes from its source to its mouth, control flow describes the logical path a program is expected to take when you run it. Just as you can divert the flow of a stream with structures like dams and bridges, you can change the direction a program flows by the use of control and repetition structures. The below slides aim to provide an introduction to these concepts and the way we can use them.\n\n# Slides\n\nUse the left ⬅️ and right ➡️ arrow keys to navigate through the slides below. To view in a separate tab/window, [follow this link](slides.html){target=\"_blank\"}.\n\n<iframe src=\"slides.html\" height=\"500\" width=\"100%\"></iframe>\n\n# What is Control Flow?\n\nControl flow is the way your code will flow in runtime. In general this will follow a sequential order completing each statement from top to bottom, however, there are ways to control the flow of your code, even repeating through sections.\n\n## Control (or Decision) Structures\n\nLike a case statement in SQL, control structures can be used to select different options and actions based on the input variable. These follow the structure:\n\n::: {#bool-structure .cell execution_count=1}\n``` {.python .cell-code}\nif <this boolean condition is true>:\n  <do this>\nelif <this boolean condition is true>:\n  <do that>\nelse:\n  <do something else>\n```\n:::\n\n\nIn its most basic form, only an `if` clause is required. The `else` clause allows the bucketing of all circumstances not handled previously so that code can be applied in any given circumstance.\n\n## Repetition Structures (or Loops)\n\nRepetition structures allow for sections of code to be repeated until a condition is met. `for` loops repeat code over a set number of iterations based on an iterable condition. `while` loops repeat code until a predetermined condition is met.\n\n### `for` Loops\n\nBelow are two examples of `for` code loops. The first loops through a list called 'providers' and prints each item. The second loops through a range of numbers and prints each.\n\n::: {.column style=\"width:45%; font-size: 80%;\"}\nLogical Structure\n\n```\nfor <i> in <iterable>:\n    <code_to_iterate>\n\nfor <i> in range(<a> - <b>):\n  print(<i>)\n```\n:::\n\n::: {.column style=\"width:45%; font-size: 80%;\"}\nPython\n\n```\nfor provider in providers:\n  print(provider)\n\nfor num in range(0-6):\n  print(num)\n```\n:::\n\n### `with` Loops\n\n`while` loops check the state of a boolean condition. In this case the loop runs until a declared variable is over 5 printing each incremental value.\n\n\n::: {.column style=\"width:45%; font-size: 80%;\"}\nLogical Structure\n\n```\nwhile <boolean is true>:\n    <code_to_iterate>\n```\n:::\n\n::: {.column style=\"width:45%; font-size: 80%;\"} \nPython\n\n```\nvar = 0\nwhile var <= 5:\n  print(var)\n```\n:::\n\n## Exercises\n\n1. Write a function that prints whether a number is negative, zero, or positive.\n\n::: {.callout-note title=\"Solution\" collapse=\"true\"}\n\n::: {#eb3bfc05 .cell execution_count=2}\n``` {.python .cell-code}\ndef classify(x):\n    if x < 0:\n        print(\"Negative\")\n    elif x == 0:\n        print(\"Zero\")\n    else:\n        print(\"Positive\")\n```\n:::\n\n\n:::\n\n2. Loop through a list of ages and print if each person is a Child (<13), Teenager (13–17), Adult (18–64), or Senior (65+).\n\n::: {.callout-note title=\"Solution\" collapse=\"true\"}\n\n::: {#a56a7587 .cell execution_count=3}\n``` {.python .cell-code}\nages = [10, 15, 30, 70]\nfor age in ages:\n    if age < 13:\n        print(\"Child\")\n    elif age < 18:\n        print(\"Teenager\")\n    elif age < 65:\n        print(\"Adult\")\n    else:\n        print(\"Senior\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nChild\nTeenager\nAdult\nSenior\n```\n:::\n:::\n\n\n:::\n\n3. Use a `while` loop to count down from 10 to 0.\n\n::: {.callout-note title=\"Solution\" collapse=\"true\"}\n\n::: {#310d36ba .cell execution_count=4}\n``` {.python .cell-code}\nx = 10\nwhile x >= 0:\n    print(x)\n    x -= 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\n```\n:::\n:::\n\n\n:::\n\n4. Loop from 1 to 20 and print Fizz for multiples of 3, Buzz for 5, FizzBuzz for both.\n\n::: {.callout-note title=\"Solution\" collapse=\"true\"}\n\n::: {#30070705 .cell execution_count=5}\n``` {.python .cell-code}\nfor i in range(1, 21):\n    if i % 3 == 0 and i % 5 == 0:\n        print(\"FizzBuzz\")\n    elif i % 3 == 0:\n        print(\"Fizz\")\n    elif i % 5 == 0:\n        print(\"Buzz\")\n    else:\n        print(i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n2\nFizz\n4\nBuzz\nFizz\n7\n8\nFizz\nBuzz\n11\nFizz\n13\n14\nFizzBuzz\n16\n17\nFizz\n19\nBuzz\n```\n:::\n:::\n\n\n:::\n\n5. Use `random.randint` to simulate rolling a die until you get a 6.\n\n::: {.callout-note title=\"Solution\" collapse=\"true\"}\n\n::: {#b61c7576 .cell execution_count=6}\n``` {.python .cell-code}\nimport random\nrolls = 0\nwhile True:\n    rolls += 1\n    if random.randint(1, 6) == 6:\n        break\nprint(\"Rolled a 6 in\", rolls, \"tries\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRolled a 6 in 13 tries\n```\n:::\n:::\n\n\n:::\n\n6. Loop through job titles and print if they contain “analyst” or “manager.”\n\n::: {.callout-note title=\"Solution\" collapse=\"true\"}\n\n::: {#f0bf0234 .cell execution_count=7}\n``` {.python .cell-code}\ntitles = [\"Data Analyst\", \"HR Manager\", \"Intern\"]\nfor title in titles:\n    t = title.lower()\n    if \"analyst\" in t:\n        print(\"Analyst role\")\n    elif \"manager\" in t:\n        print(\"Manager role\")\n    else:\n        print(\"Other\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAnalyst role\nManager role\nOther\n```\n:::\n:::\n\n\n:::\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}