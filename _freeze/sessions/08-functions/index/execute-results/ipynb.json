{
  "hash": "3c087298d5a06c107df00999556fbf68",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Functions & Functional Programming\"\nformat:\n  html: default\n  ipynb: default\n---\n\nThis session is the third in a series of programming fundamentals. The concepts here can feel abstract at first, but they are a big part of how Python code is structured in real projects. By the end, you’ll see how functions make code shorter, cleaner, and easier to re-use. \n\nThe below slides aim to provide an introduction to these concepts and the way we can use them.\n\n## Slides\n\nUse the left ⬅️ and right ➡️ arrow keys to navigate through the slides below. To view in a separate tab/window, [follow this link](slides.html){target=\"_blank\"}.\n\n<iframe src=\"slides.html\" height=\"500\" width=\"100%\"></iframe>\n\n## What are Functions?\n\nA function is just a reusable set of instructions that takes input, does something with it, and gives you a result.\n\nIf you’ve used Excel, you already use functions all the time. For example, SUM(A1:A10) or VLOOKUP(...). You give them arguments (the input), they process it, and they return an output. If you’ve used SQL, it’s the same idea. COUNT(*), ROUND(price, 2), or UPPER(name) are functions. They save you from writing the same logic over and over, and they keep code tidy.\n\nIn Python, functions work the same way, but you can also write your own custom ones, so instead of just using what is built-in, you can create tools that do exactly what you need.\n\n## Simple Built-In & User-Defined Functions\n\nPython already has many built-in functions which makes the language more functional.\n\n### Print Statements\n\nThe `print()` function sends output to the screen. It’s often the first Python function you use.\n\n::: {#print .cell execution_count=1}\n``` {.python .cell-code}\nprint(\"Hello, World!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello, World!\n```\n:::\n:::\n\n\n### Comparing Operations\n\nWe’ll compare how to do things \"manually\" with loops vs. using Python’s built-in (or imported) functions. This shows how functions save time and reduce code.\n\n#### Length\n\nWe can count the number of items in a list using a for loop.\n\n::: {#length-manual .cell execution_count=2}\n``` {.python .cell-code}\nvalues = [10, 20, 30, 40, 50]\n\nlength_manual = 0\nfor _ in values:\n    length_manual += 1\nprint(\"Length:\", length_manual)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLength: 5\n```\n:::\n:::\n\n\nHowever, it is much faster to just use `len()` instead.\n\n::: {#length-function .cell execution_count=3}\n``` {.python .cell-code}\nprint(\"Length:\", len(values))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLength: 5\n```\n:::\n:::\n\n\n#### Sum\n\nWe can also sum the value of all the numbers in our `values` object.\n\n::: {#sum-manual .cell execution_count=4}\n``` {.python .cell-code}\ntotal_manual = 0\nfor val in values:\n    total_manual += val\nprint(\"Sum:\", total_manual)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSum: 150\n```\n:::\n:::\n\n\nOr we can use `sum()`.\n\n::: {#sum-function .cell execution_count=5}\n``` {.python .cell-code}\nprint(\"Sum:\", sum(values))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSum: 150\n```\n:::\n:::\n\n\n#### Mean\n\nFinally, we can manually calculate the mean of our list of values by summing them and then dividing by the length of the list.\n\n::: {#mean-manual .cell execution_count=6}\n``` {.python .cell-code}\ntotal_for_mean = 0\ntotal_length = 0\n\nfor val in values:\n    total_for_mean += val\n\nfor val in values:\n    total_length += 1\n\nmean_manual = total_for_mean / total_length\nprint(\"Mean:\", mean_manual)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMean: 30.0\n```\n:::\n:::\n\n\nOr we can import numpy and use `np.mean()`.\n\n::: {#mean-function .cell execution_count=7}\n``` {.python .cell-code}\nimport numpy as np\n\nvalues = [10, 20, 30, 40, 50]\nprint(\"Mean:\", np.mean(values))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMean: 30.0\n```\n:::\n:::\n\n\n### Combining Operations\n\nWe can create our own functions to group multiple calculations. The function below takes two numbers and returns a sentence describing their sum, difference, and product.\n\n::: {#cell-summary-function .cell execution_count=8}\n``` {.python .cell-code}\ndef summarise_numbers(a, b):\n\n    total = a + b\n    difference = a - b\n    product = a * b\n    return (\n        f\"The sum of {a} and {b} is {total}, \"\n        f\"the difference is {difference}, \"\n        f\"and their product is {product}.\"\n    )\n\nsummarise_numbers(10, 5)\n```\n\n::: {#summary-function .cell-output .cell-output-display execution_count=8}\n```\n'The sum of 10 and 5 is 15, the difference is 5, and their product is 50.'\n```\n:::\n:::\n\n\nTo illustrate how functions work, we can break them down step-by-step. `def summarise_numbers(a, b)` is the function header. `def` states that you are defining a function, `summarise_numbers` is the function name, and `(a, b)` is the input parameter (the numbers we are summarising). The function body (the indented code below the header) defines the steps the function should take, and the `return` statement declares the output from the function.\n\n## Exploring Data with Functions\n\nWe can use functions to explore an entire dataset quickly and efficiently, where a manual process would require a lot of repetition.\n\n### Setup\n\nFirst, we will import all of the packages we need.\n\n::: {#setup .cell execution_count=9}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport re\n\nfrom sklearn.datasets import fetch_california_housing\n\nsns.set_theme(style=\"whitegrid\")\n```\n:::\n\n\n### Import Data\n\nWe can then import the California housing dataset and store it in `housing_raw`, before previewing the `housing_raw` object.\n\n::: {#cell-import-data .cell execution_count=10}\n``` {.python .cell-code}\nhousing_raw = fetch_california_housing(as_frame=True).frame\nhousing_raw.head()\n```\n\n::: {#import-data .cell-output .cell-output-display execution_count=10}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MedInc</th>\n      <th>HouseAge</th>\n      <th>AveRooms</th>\n      <th>AveBedrms</th>\n      <th>Population</th>\n      <th>AveOccup</th>\n      <th>Latitude</th>\n      <th>Longitude</th>\n      <th>MedHouseVal</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>8.3252</td>\n      <td>41.0</td>\n      <td>6.984127</td>\n      <td>1.023810</td>\n      <td>322.0</td>\n      <td>2.555556</td>\n      <td>37.88</td>\n      <td>-122.23</td>\n      <td>4.526</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>8.3014</td>\n      <td>21.0</td>\n      <td>6.238137</td>\n      <td>0.971880</td>\n      <td>2401.0</td>\n      <td>2.109842</td>\n      <td>37.86</td>\n      <td>-122.22</td>\n      <td>3.585</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>7.2574</td>\n      <td>52.0</td>\n      <td>8.288136</td>\n      <td>1.073446</td>\n      <td>496.0</td>\n      <td>2.802260</td>\n      <td>37.85</td>\n      <td>-122.24</td>\n      <td>3.521</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>5.6431</td>\n      <td>52.0</td>\n      <td>5.817352</td>\n      <td>1.073059</td>\n      <td>558.0</td>\n      <td>2.547945</td>\n      <td>37.85</td>\n      <td>-122.25</td>\n      <td>3.413</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3.8462</td>\n      <td>52.0</td>\n      <td>6.281853</td>\n      <td>1.081081</td>\n      <td>565.0</td>\n      <td>2.181467</td>\n      <td>37.85</td>\n      <td>-122.25</td>\n      <td>3.422</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Preprocess Data\n\nWe’ll make a helper function to convert text to `snake_case` (lowercase with underscores). This is a common style for column names.\n\n::: {#snake-case-function .cell execution_count=11}\n``` {.python .cell-code}\ndef to_snake_case(s: str) -> str:\n    \"\"\"\n    Convert a given string to snake_case.\n    \"\"\"\n    s = s.strip()  # remove leading/trailing spaces\n    s = re.sub(r'[\\s-]+', '_', s)  # replace spaces and hyphens with underscores\n    s = re.sub(r'(?<=[a-z])(?=[A-Z])', '_', s)  # add underscore before capital letters\n    s = re.sub(r'[^a-zA-Z0-9_]', '', s)  # remove anything not letter, number, or underscore\n    return s.lower()  # make everything lowercase\n```\n:::\n\n\nThis function has the same basic structure as the function we defined earlier, but with some additional information that is good practice for writing reproducible code. In the function header, the input `(s: str)` includes the input parameter `s` and a type-hint starting that `s` should be a string. The `-> str` immediately after states that the function will return a string. The triple-quoted text just below the function header describes what the function does. You can also include what the function expects and what it returns. \n\nNext, we can create a function that cleans our dataset, including the `to_snake_case` function as a step in the process. The other step is to drop all NAs and duplicates.\n\n::: {#preprocess-function .cell execution_count=12}\n``` {.python .cell-code}\ndef preprocess_data(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"\n    Preprocess a dataframe by cleaning and standardizing column names.\n    \"\"\"\n    df = df.dropna().drop_duplicates().copy()  # remove missing rows and duplicates\n    df.columns = [to_snake_case(col) for col in df.columns]  # rename columns to snake_case\n    return df  # return cleaned dataframe\n```\n:::\n\n\nWe can then apply this to our dataset.\n\n::: {#cell-preprocess-data .cell execution_count=13}\n``` {.python .cell-code}\ndf = preprocess_data(housing_raw)\ndf.head()\n```\n\n::: {#preprocess-data .cell-output .cell-output-display execution_count=13}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>med_inc</th>\n      <th>house_age</th>\n      <th>ave_rooms</th>\n      <th>ave_bedrms</th>\n      <th>population</th>\n      <th>ave_occup</th>\n      <th>latitude</th>\n      <th>longitude</th>\n      <th>med_house_val</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>8.3252</td>\n      <td>41.0</td>\n      <td>6.984127</td>\n      <td>1.023810</td>\n      <td>322.0</td>\n      <td>2.555556</td>\n      <td>37.88</td>\n      <td>-122.23</td>\n      <td>4.526</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>8.3014</td>\n      <td>21.0</td>\n      <td>6.238137</td>\n      <td>0.971880</td>\n      <td>2401.0</td>\n      <td>2.109842</td>\n      <td>37.86</td>\n      <td>-122.22</td>\n      <td>3.585</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>7.2574</td>\n      <td>52.0</td>\n      <td>8.288136</td>\n      <td>1.073446</td>\n      <td>496.0</td>\n      <td>2.802260</td>\n      <td>37.85</td>\n      <td>-122.24</td>\n      <td>3.521</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>5.6431</td>\n      <td>52.0</td>\n      <td>5.817352</td>\n      <td>1.073059</td>\n      <td>558.0</td>\n      <td>2.547945</td>\n      <td>37.85</td>\n      <td>-122.25</td>\n      <td>3.413</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3.8462</td>\n      <td>52.0</td>\n      <td>6.281853</td>\n      <td>1.081081</td>\n      <td>565.0</td>\n      <td>2.181467</td>\n      <td>37.85</td>\n      <td>-122.25</td>\n      <td>3.422</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Visualise Distributions\n\nA great way to use functions for exploratory data analysis is for visualing multiple columns at once. If we visualise every column manually, this would require a lot of code. However, we can write a single function that returns a plot for every relevant column in a single figure.\n\nBelow is a function for plotting a histogram for each numeric column in a single figure.\n\n::: {#plot-numeric-cols-function .cell execution_count=14}\n``` {.python .cell-code}\ndef plot_numeric_columns(df: pd.DataFrame) -> None:\n\n    \"\"\"\n    plot histograms for all numeric columns in one figure with subplots.\n    \"\"\"\n    \n    numeric_cols = df.select_dtypes(include=[np.number]).columns  # get numeric column names\n    n = len(numeric_cols)  # count how many numeric columns there are\n    if n == 0: # if there are no numeric columns  \n        print(\"no numeric columns found\") # tell the user\n        return # and stop the function\n\n    # determine how many plots per row (max 3)\n    ncols = min(n, 3)  # number of columns in subplot grid\n    nrows = (n + ncols - 1) // ncols  # number of rows in subplot grid (ceiling division)\n    fig, axes = plt.subplots(nrows, ncols, figsize=(6 * ncols, 4 * nrows))  # create figure and axes\n    if n == 1:  # if only one numeric column\n        axes = [axes]  # put single axis in a list for consistency\n    else:\n        axes = axes.flatten()  # flatten 2d array of axes into 1d list\n\n    for ax, col in zip(axes, numeric_cols):  # loop through axes and column names\n        ax.hist(df[col], bins=20, edgecolor=\"black\")  # draw histogram for column\n        ax.set_xlabel(col)  # set x-axis label\n        ax.set_ylabel(\"\")  # remove y-axis label\n\n    # remove any extra empty plots\n    for ax in axes[len(numeric_cols):]:  # loop over unused axes\n        fig.delaxes(ax)  # delete unused subplot\n\n    plt.tight_layout()  # adjust layout so plots don't overlap\n    plt.show()  # display the plots\n```\n:::\n\n\nAnd then we can run this function on our California housing dataset.\n\n::: {#cell-plot-numeric-cols .cell execution_count=15}\n``` {.python .cell-code}\nplot_numeric_columns(df)\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-ipynb/plot-numeric-cols-output-1.png){#plot-numeric-cols}\n:::\n:::\n\n\nWe can do the same for categorical columns, using bar charts.\n\n::: {#plot-categorical-cols-function .cell execution_count=16}\n``` {.python .cell-code}\ndef plot_categorical_columns(df: pd.DataFrame) -> None:\n    \n    \"\"\"\n    plot bar charts for all categorical columns in one figure with subplots.\n    \"\"\"\n    \n    cat_cols = df.select_dtypes(exclude=[np.number]).columns  # get non-numeric column names\n    n = len(cat_cols)  # count how many categorical columns there are\n    if n == 0:  # if there are no categorical columns\n        print(\"no categorical columns found\")  # tell the user\n        return  # and stop the function\n\n    # determine how many plots per row (max 3)\n    ncols = min(n, 3)  # number of columns in subplot grid\n    nrows = (n + ncols - 1) // ncols  # number of rows in subplot grid (ceiling division)\n    fig, axes = plt.subplots(nrows, ncols, figsize=(6 * ncols, 4 * nrows))  # create figure and axes\n    if n == 1:  # if only one categorical column\n        axes = [axes]  # put single axis in a list for consistency\n    else:\n        axes = axes.flatten()  # flatten 2d array of axes into 1d list\n\n    for ax, col in zip(axes, cat_cols):  # loop through axes and column names\n        df[col].value_counts().plot(kind=\"bar\", ax=ax, edgecolor=\"black\")  # draw bar chart\n        ax.set_xlabel(col)  # set x-axis label\n        ax.set_ylabel(\"\")  # remove y-axis label\n\n    # remove any extra empty plots\n    for ax in axes[len(cat_cols):]:  # loop over unused axes\n        fig.delaxes(ax)  # delete unused subplot\n\n    plt.tight_layout()  # adjust layout so plots don't overlap\n    plt.show()  # display the plots\n```\n:::\n\n\nHowever, there are no categorical columns in this dataset[^Categorical].\n\n::: {#plot-categorical-cols .cell execution_count=17}\n``` {.python .cell-code}\nplot_categorical_columns(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nno categorical columns found\n```\n:::\n:::\n\n\n[^Categorical]:\n\nThis is just here as a demonstration of how you would do this with categorical columns, and to show what it would look like if the function cannot find relevant columns and stops early.\n\n## Summary\n\nFunctions let you package steps into reusable, predictable tools. You will have used functions before in other settings, and when writing Python code you will regularly encounter built-in functions and functions imported from packages. The more you work in Python, the more you’ll see yourself building small helper functions to avoid repeating code. \n\n## Exercises\n\n1. Write a function that returns the maximum and minimum values in a list.\n\n::: {.callout-note title=\"Solution\" collapse=\"true\"}\n\n::: {#cell-min-max .cell execution_count=18}\n``` {.python .cell-code}\ndef min_max(lst):\n    return min(lst), max(lst)\n\nmin_max([4, 1, 9])\n```\n\n::: {#min-max .cell-output .cell-output-display execution_count=18}\n```\n(1, 9)\n```\n:::\n:::\n\n\n:::\n\n2. Modify `summarise_numbers` to also return the division result (a / b).\n\n::: {.callout-note title=\"Solution\" collapse=\"true\"}\n\n::: {#cell-division .cell execution_count=19}\n``` {.python .cell-code}\ndef summarise_numbers(a, b):\n    total = a + b\n    difference = a - b\n    product = a * b\n    division = a / b\n    return total, difference, product, division\n\nsummarise_numbers(5, 10)\n```\n\n::: {#division .cell-output .cell-output-display execution_count=19}\n```\n(15, -5, 50, 0.5)\n```\n:::\n:::\n\n\n:::\n\n3. Write a function that counts how many even numbers are in a list.\n\n*Hint: This requires using a 'modulo operator'*[^Modulo].\n\n::: {.callout-note title=\"Solution\" collapse=\"true\"}\n\n::: {#cell-count-evens .cell execution_count=20}\n``` {.python .cell-code}\ndef count_evens(lst):\n    return sum(1 for x in lst if x % 2 == 0)\n\nvalues = [1, 2, 3, 4, 5]\ncount_evens(values)\n```\n\n::: {#count-evens .cell-output .cell-output-display execution_count=20}\n```\n2\n```\n:::\n:::\n\n\n:::\n\nFor the next three questions, you can use this sample dataset:\n\n::: {#sample-data .cell execution_count=21}\n``` {.python .cell-code}\nsample_df = pd.DataFrame({\n    \"Name\": np.random.choice([\"Alice\", \"Bob\", \"Charlie\", \"John\"], size=20),\n    \"Department\": np.random.choice([\"HR\", \"IT\", \"Finance\"], size=20),\n    \"Age\": np.random.randint(21, 60, size=20),\n    \"Salary\": np.random.randint(30000, 80000, size=20),\n    \"Years_at_Company\": np.random.randint(1, 20, size=20)\n})\n```\n:::\n\n\n4. Create a function that takes a dataframe and returns only columns with numeric data.\n\n::: {.callout-note title=\"Solution\" collapse=\"true\"}\n\n::: {#cell-select-numeric .cell execution_count=22}\n``` {.python .cell-code}\ndef select_numeric(df):\n    return df.select_dtypes(include=[np.number])\n\nselect_numeric(sample_df)\n```\n\n::: {#select-numeric .cell-output .cell-output-display execution_count=22}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Age</th>\n      <th>Salary</th>\n      <th>Years_at_Company</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>50</td>\n      <td>30706</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>25</td>\n      <td>69068</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>58</td>\n      <td>30710</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>21</td>\n      <td>70500</td>\n      <td>15</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>23</td>\n      <td>32154</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>56</td>\n      <td>71888</td>\n      <td>13</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>24</td>\n      <td>53886</td>\n      <td>13</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>36</td>\n      <td>53227</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>48</td>\n      <td>77740</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>30</td>\n      <td>60490</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>44</td>\n      <td>58749</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>55</td>\n      <td>31451</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>35</td>\n      <td>60761</td>\n      <td>13</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>28</td>\n      <td>60538</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>23</td>\n      <td>51678</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>53</td>\n      <td>65071</td>\n      <td>17</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>35</td>\n      <td>50708</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>44</td>\n      <td>55151</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>22</td>\n      <td>49041</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>50</td>\n      <td>54719</td>\n      <td>10</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n\n5. Rewrite `plot_numeric_columns` so it uses seaborn's `histplot` instead of matplotlib's `hist`.\n\n::: {.callout-note title=\"Solution\" collapse=\"true\"}\n\n::: {#sns-numeric .cell execution_count=23}\n``` {.python .cell-code}\ndef plot_numeric_columns(df):\n    numeric_cols = df.select_dtypes(include=[np.number]).columns\n    for col in numeric_cols:\n        sns.histplot(df[col], bins=20)\n        plt.show()\n\nplot_numeric_columns(sample_df)\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-ipynb/sns-numeric-output-1.png){#sns-numeric-1}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-ipynb/sns-numeric-output-2.png){#sns-numeric-2}\n:::\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-ipynb/sns-numeric-output-3.png){#sns-numeric-3}\n:::\n:::\n\n\n:::\n\n6. Write a function that converts all string columns in a dataframe to lowercase.\n\n::: {.callout-note title=\"Solution\" collapse=\"true\"}\n\n::: {#cell-lowercase-strings .cell execution_count=24}\n``` {.python .cell-code}\ndef lowercase_strings(df):\n    for col in df.select_dtypes(include=['object']):\n        df[col] = df[col].str.lower()\n    return df\n\nlowercase_strings(sample_df)\n```\n\n::: {#lowercase-strings .cell-output .cell-output-display execution_count=24}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>Department</th>\n      <th>Age</th>\n      <th>Salary</th>\n      <th>Years_at_Company</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>alice</td>\n      <td>hr</td>\n      <td>50</td>\n      <td>30706</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>alice</td>\n      <td>finance</td>\n      <td>25</td>\n      <td>69068</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>alice</td>\n      <td>it</td>\n      <td>58</td>\n      <td>30710</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>bob</td>\n      <td>hr</td>\n      <td>21</td>\n      <td>70500</td>\n      <td>15</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>charlie</td>\n      <td>it</td>\n      <td>23</td>\n      <td>32154</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>bob</td>\n      <td>finance</td>\n      <td>56</td>\n      <td>71888</td>\n      <td>13</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>bob</td>\n      <td>hr</td>\n      <td>24</td>\n      <td>53886</td>\n      <td>13</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>john</td>\n      <td>hr</td>\n      <td>36</td>\n      <td>53227</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>charlie</td>\n      <td>it</td>\n      <td>48</td>\n      <td>77740</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>charlie</td>\n      <td>hr</td>\n      <td>30</td>\n      <td>60490</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>charlie</td>\n      <td>it</td>\n      <td>44</td>\n      <td>58749</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>john</td>\n      <td>finance</td>\n      <td>55</td>\n      <td>31451</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>bob</td>\n      <td>it</td>\n      <td>35</td>\n      <td>60761</td>\n      <td>13</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>charlie</td>\n      <td>it</td>\n      <td>28</td>\n      <td>60538</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>john</td>\n      <td>it</td>\n      <td>23</td>\n      <td>51678</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>john</td>\n      <td>hr</td>\n      <td>53</td>\n      <td>65071</td>\n      <td>17</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>bob</td>\n      <td>finance</td>\n      <td>35</td>\n      <td>50708</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>john</td>\n      <td>hr</td>\n      <td>44</td>\n      <td>55151</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>bob</td>\n      <td>hr</td>\n      <td>22</td>\n      <td>49041</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>charlie</td>\n      <td>hr</td>\n      <td>50</td>\n      <td>54719</td>\n      <td>10</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n\n[^Modulo]:\n\nIf you don't know what a modulo operator is (totally understandable), you can search this online and it will likely help you find the answer to this question. It is always okay (encouraged, even) to search for answers to code questions online.\n\n---\njupyter:\n  kernelspec:\n    display_name: Python 3 (ipykernel)\n    language: python\n    name: python3\n    path: c:\\Users\\paul.johnson\\git\\code-club\\.venv\\share\\jupyter\\kernels\\python3\n  language_info:\n    codemirror_mode:\n      name: ipython\n      version: 3\n    file_extension: .py\n    mimetype: text/x-python\n    name: python\n    nbconvert_exporter: python\n    pygments_lexer: ipython3\n    version: 3.12.5\n---\n",
    "supporting": [
      "index_files\\figure-ipynb"
    ],
    "filters": []
  }
}